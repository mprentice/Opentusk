#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib";

use strict;
use TUSK::UploadContent;
use HSDB4::Constants;

foreach my $cur_size ( @HSDB4::Constants::image_sizes ) {
	next if ($cur_size eq 'resize');

	for my $a (0..9) {
		doMkDir( $TUSK::UploadContent::path{'slide'} . '/' . $cur_size . '/' . $a );
		for my $b (0..9) {
			doMkDir( $TUSK::UploadContent::path{'slide'} . '/' . $cur_size .  '/' . $a . '/' . $b );
			for my $c (0..9) {
				doMkDir( $TUSK::UploadContent::path{'slide'} . '/' . $cur_size .  '/' . $a . '/' . $b . '/' . $c );
			}
		}
	}
}

foreach my $cur_size ( @HSDB4::Constants::image_sizes ) {
	next if ($cur_size eq 'resize' || $cur_size eq 'thumb' || $cur_size eq 'icon');

	for my $a (0..9) {
		doMkDir( $TUSK::UploadContent::path{'slide'} . '/overlay/' . $cur_size . '/' . $a );
		for my $b (0..9) {
			doMkDir( $TUSK::UploadContent::path{'slide'} . '/overlay/' . $cur_size .  '/' . $a . '/' . $b );
			for my $c (0..9) {
				doMkDir( $TUSK::UploadContent::path{'slide'} . '/overlay/' . $cur_size .  '/' . $a . '/' . $b . '/' . $c );
			}
		}
	}
}

sub doMkDir {
	my $dir = shift;
	unless(mkdir($dir)) {print "Unable to mkdir $dir : $!\n";}
}
