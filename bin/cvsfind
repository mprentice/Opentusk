#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib";

use strict;

use Getopt::Long;
use Cwd;

open(STDERR, ">/dev/null");

my $cwd = getcwd();
my @queue = ($cwd);
my ($pattern, $before, $after, $latest, $verbose, $help);
my @finds;
my $utln_max_len = 0;

Getopt::Long::Configure("bundling");
GetOptions('before|b=s' => \$before,
	   'after|a=s' => \$after,
	   'pattern|p=s'  => \$pattern,
	   'latest|l' => \$latest,
	   'verbose|v' => \$verbose,
	   'help|h'  => \$help);

usage() if($help);

if($before) {
    unless($before =~ /(\d{4})[\/|-](\d{2})[\/|-](\d{2}) *(\d{2})?:?(\d{2})?:?(\d{2})?/) {
	print "invalid date format for 'before'\n";
	exit(1);
    }
    $before = [$1, $2, $3, $4, $5, $6];
    unless($4) {
	$before->[3] = 0;
	$before->[4] = 0;
	$before->[5] = 0;
    }
}

if($after) {
    unless($after =~ m/(\d{4})[\/|-](\d{2})[\/|-](\d{2}) *(\d{2})?:?(\d{2})?:?(\d{2})?/) {
	print "invalid date format for 'after'\n";
	exit(1);
    }
    $after = [$1, $2, $3, $4, $5, $6];
    unless($4) {
	$after->[3] = 23;
	$after->[4] = 59;
	$after->[5] = 59;
    }
}

while(@queue) {
    my $file = shift(@queue);

    if(-d $file) {
	next if($file =~ m/CVS$/);
	opendir(DIR, $file);
	my @files = grep { !/^\.\.?$/ } readdir(DIR);
	push(@queue, map { $file . "/" . $_ } @files);
	closedir(DIR);
    }
    elsif((not $pattern) || ($file =~ /$pattern/)) {
	next if($file =~ /\~$/);
	open(OUTPUT, "cvs log $file |");
	my $count = 0;
	print "$file\n" if($verbose);
	while(<OUTPUT>) {
	    if(/(\d{4})\/(\d{2})\/(\d{2}) (\d{2}):(\d{2}):(\d{2}).*author: ([^;]+)/) {
		my $date = [$1, $2, $3, $4, $5, $6];
		my $utln = $7;
		my $utln_len = length($utln);

		$utln_max_len = $utln_len if($utln_len > $utln_max_len);
		if(((not $before) || (compare_dates($before, $date) <= 0)) &&
		   ((not $after)  || (compare_dates($after, $date) >= 0)))
		{
		    $file =~ s/^$cwd\///;
		    push(@finds, [$file, $date, $utln]);
		}

		if($latest) {
		    close(OUTPUT);
		    last;
		}
	    }
	}
	close(OUTPUT);
    }
}

my @sorted_finds = sort compare_finds @finds;
my $utln_format = '%-' . $utln_max_len . 's';
foreach(@sorted_finds) {
    print $_->[1][0] . '/' . $_->[1][1] . '/' . $_->[1][2] . ' ';
    print $_->[1][3] . ':' . $_->[1][4] . ':' . $_->[1][5];
    print " | " . sprintf($utln_format, $_->[2]) . " | " . $_->[0] . "\n";
}

sub compare_finds {
    return compare_dates($a->[1], $b->[1]);
}

sub compare_dates {
    my $a = shift();
    my $b = shift();

    my ($year1, $month1, $day1, $hour1, $minute1, $second1) = @$a;
    my ($year2, $month2, $day2, $hour2, $minute2, $second2) = @$b;

    return ($year2 <=> $year1) || ($month2 <=> $month1) || ($day2 <=> $day1) ||
	($hour2 <=> $hour1) || ($minute2 <=> $minute1) || ($second2 <=> $second1);
}

sub usage {
    print "cvsfind [-v|--verbose] [[-p|--pattern] pattern] [[-b|--before] \"yyyy-mm-dd [hh:mm:ss]\"] [[-a|--after] \"yyyy-mm-dd [hh:mm:ss]\"]\n";
    print "verbose: provide entertainment by printing file names\n";
    print "pattern: a perl regex by which to selectively view files\n";
    print "before: the date before which to include files\n";
    print "after: the date after which to include files\n";
    exit(1);
}
