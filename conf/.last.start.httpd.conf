LoadModule ssl_module           /usr/local/apache/libexec/libssl.so
LoadModule perl_module          /usr/local/apache/libexec/libperl.so

# the alias_module needs to be loaded before the rewrite_module
# otherwise, the search form will not be found:
#
# [Mason] Cannot resolve file to component: /usr/local/tusk/current/code/htdocs/tusk/search/form
LoadModule alias_module         /usr/local/apache/libexec/mod_alias.so
LoadModule rewrite_module       /usr/local/apache/libexec/mod_rewrite.so

# the autoindex_module needs to be loaded before the dir_module
# otherwise, the index.html file will not get read properly.
LoadModule autoindex_module     /usr/local/apache/libexec/mod_autoindex.so
LoadModule dir_module           /usr/local/apache/libexec/mod_dir.so

LoadModule userdir_module       /usr/local/apache/libexec/mod_userdir.so
LoadModule mime_module          /usr/local/apache/libexec/mod_mime.so
LoadModule config_log_module    /usr/local/apache/libexec/mod_log_config.so
LoadModule setenvif_module      /usr/local/apache/libexec/mod_setenvif.so
LoadModule status_module        /usr/local/apache/libexec/mod_status.so
LoadModule access_module        /usr/local/apache/libexec/mod_access.so

# This module causes problems with IE6 downloading content as well as
# load issues in the TUSK production environment.  Also there is a default
# compression module (mod_deflate) that is stock with apache 2.x releases.
#LoadModule gzip_module          /usr/local/apache/libexec/mod_gzip.so

#file httpd.conf
PerlPassEnv HOME
PerlPassEnv ALTERNATE_DB_ADDRESS
PerlPassEnv USER


<Perl>
#!/usr/bin/perl
use Apache::DBI;
use Sys::Hostname;
use FindBin;
use strict;
use lib "$FindBin::Bin/../lib";
use httpdconf;
use TUSK::Constants;
use TUSK::Shibboleth::User;

# This file generated the httpd.conf files for the tusk servers
# This hopefully makes it easier to adapt to running either in the production environment or by developers.
# It uses a module called lib/httpdconf.pm
# This file should (hopefully) never need to be edited by an external installation.

my $shibSecurePort = $TUSK::Constants::shibSPSecurePort;
my $useShibboleth = $TUSK::Constants::useShibboleth;
my $shibbolethSP = $TUSK::Constants::shibbolethSP;
my $shibbolethAlias = "";

$ENV{PATH}='/usr/local/bin:/usr/bin:/bin';
$ENV{HOSTNAME}= Sys::Hostname::hostname;
our @PerlConfig;

my %hashOfVariables;
unless(httpdconf::setVariablesForServerEnvironment(\%hashOfVariables)) {exit();}

push @PerlConfig, qq[
    User	$hashOfVariables{'apacheUser'}
    Group	$hashOfVariables{'apacheGroup'}

    ServerSignature Off
    ServerTokens Prod

    <Location />
      PerlSetVar	SecureLogin $hashOfVariables{'secure_loc'}login
      PerlSetVar	SecureDomain $hashOfVariables{'secure_loc'}
    </Location>

    Redirect	/protected/  $hashOfVariables{'secure_loc'}

    ServerName  $hashOfVariables{'server_name'}
    ServerAdmin $hashOfVariables{'server_admin'}

    PidFile $hashOfVariables{'pid_file'}

    ServerRoot	$hashOfVariables{'server_root'}
    CoreDumpDirectory	$hashOfVariables{'server_root'}/core_dumps

    UseCanonicalName On
    UserDir disable

    LogLevel $hashOfVariables{'loglevel'}

    PerlSetEnv SERVER_ROOT $hashOfVariables{'server_root'}
    PerlSetEnv CODE_ROOT $hashOfVariables{'code_root'}
    PerlSetEnv LOG_ROOT $hashOfVariables{'log_root'}
    PerlSetEnv HOSTNAME $ENV{HOSTNAME}
    PerlSetEnv HSDB_GUEST_USERNAME HSDB-Guest
    PerlSetEnv DATABASE_ADDRESS $hashOfVariables{'database_address'}
    PerlSetEnv HSDB_DATABASE_NAME hsdb4
    PerlSetEnv HSDB_DATABASE_USER $hashOfVariables{'hsdbDatabaseUser'}
    PerlSetEnv XSL_ROOT $hashOfVariables{'code_root'}/XSL
    PerlSetEnv HSDB_DATABASE_PASSWORD $hashOfVariables{'hsdbDatabasePassword'}
];		    

if ($hashOfVariables{'developer'}){
	push @PerlConfig, qq[
		PerlInitHandler Apache::Reload
		PerlSetVar HSDBDebug 2
	];
}

# Define all the apache configurations based on the MaxClients
# value that is defined in lib/httpdconf.pm file.
my $startServers = int($hashOfVariables{'MaxClients'} / 2);
$startServers = ($startServers < 4)? 4: $startServers;
push @PerlConfig, qq[
	MinSpareServers $startServers
	MaxSpareServers $hashOfVariables{'MaxClients'}
	StartServers $startServers
	MaxClients $hashOfVariables{'MaxClients'}
	MaxRequestsPerChild 1000
	TimeOut 300
	# 1.2 version
	# KeepAlive Off
	# 1.3 version
	KeepAlive 5 
	# 2.0 version
	# MaxKeepAliveRequests 100
	KeepAliveTimeout 10

	PerlTaintCheck	On
	PerlRequire		conf/startup.pl
	PerlRequire		conf/mason.pl
	PerlRequire		conf/mason_no_session.pl

	Port	$hashOfVariables{'main_port'}
	Listen      $hashOfVariables{'main_port'}
	Listen      $hashOfVariables{'secure_port'}
	LockFile $hashOfVariables{'log_root'}/httpd.lock
        LogFormat "%h\\t%l\\t%u\\t%t\\t\\"%r\\"\\t%>s\\t%b\\t\\"%{Referer}i\\"\\t\\"%{User-agent}i\\"\\t%a\\t%c\\t%A\\t%P\\t%T" combined
        LogFormat "%h\\t%t\\t\\"%{Cookie}i\\"\\t%a\\t%A\\t%P" cookieLog
	<IfModule mod_gzip.c>
		# Extended log format (for testing the compression effect)
		LogFormat                     "%h %l %u %t \\\"%V %r\\\" %<s %b mod_gzip: %{mod_gzip_result}n In:%{mod_gzip_input_size}n -< Out:%{mod_gzip_output_size}n = %{mod_gzip_compression_ratio}n pct." common_with_mod_gzip_info2
		CustomLog                     $hashOfVariables{'log_root'}/mod_gzip.log common_with_mod_gzip_info2
	</IfModule>


        SetEnvIf Request_URI ^/icons/ minorlog
        SetEnvIf Request_URI ^/graphics/ minorlog
        SetEnvIf Request_URI public/lb\$ minorlog
	SetEnvIf Request_URI sessionless/lb\$ minorlog
        SetEnvIf Request_URI \.js\$ minorlog
        SetEnvIf Request_URI \.css\$ minorlog
        SetEnvIf Request_URI \.ico\$ minorlog

	CustomLog $hashOfVariables{'log_root'}/minor_log combined env=minorlog
	CustomLog $hashOfVariables{'log_root'}/access_log combined env=!minorlog
	CustomLog $hashOfVariables{'log_root'}/cookie_log cookieLog env=!minorlog
	ErrorLog $hashOfVariables{'log_root'}/error_log

	ErrorDocument 500 /tusk/server/http/error/server

	 NameVirtualHost $hashOfVariables{'ip_address'}
];
	

###########################################
##         Apache Log Formatting
###########################################
## CookieLog OtherLogs
##    X         X   %...a:          Remote IP-address
##    X         X   %...A:          Local IP-address
##                  %...B:          Bytes sent, excluding HTTP headers.
##              X   %...b:          Bytes sent, excluding HTTP headers. In CLF format     i.e. a '-' rather than a 0 when no bytes are sent.
##              X   %...c:          Connection status when response was completed.
##                                  'X' = connection aborted before the response completed.
##                                  '+' = connection may be kept alive after the response is sent.
##                                  '-' = connection will be closed after the response is sent.
##                  %...{FOOBAR}e:  The contents of the environment variable FOOBAR
##                  %...f:          Filename
##    X         X   %...h:          Remote host
##                  %...H       The request protocol
##    X             %...{Foobar}i:  The contents of Foobar: header line(s) in the request sent to the server.
##              X   %...l:          Remote logname (from identd, if supplied)
##                  %...m       The request method
##                  %...{Foobar}n:  The contents of note "Foobar" from another module.
##                  %...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
##                  %...p:          The canonical Port of the server serving the request
##    X         X   %...P:          The process ID of the child that serviced the request.
##                  %...q       The query string (prepended with a ? if a query string exists, otherwise an empty string)
##              X   %...r:          First line of request
##              X   %...s:          Status.  For requests that got internally redirected, this is the status of the *original* request --- %...>s for the last.
##    X         X   %...t:          Time, in common log format time format (standard english format)
##                  %...{format}t:  The time, in the form given by format, which should be in strftime(3) format. (potentially localized)
##              X   %...T:          The time taken to serve the request, in seconds.
##              X   %...u:          Remote user (from auth; may be bogus if return status (%s) is 401)
##                  %...U:          The URL path requested, not including any query string.
##                  %...v:          The canonical ServerName of the server serving the request.
##                  %...V:          The server name according to the UseCanonicalName setting.


# Load the modules if were using shibboleth
if($useShibboleth) {
	print STDERR "Loading shibboleth add-on.\n";
	push @PerlConfig, qq{
		######
		## SHIB Config
		######

		#
		# Load the Shibboleth module.
		#
		LoadModule mod_shib /opt/shibboleth-sp/lib/shibboleth/mod_shib_13.so

		#
		# Global Configuration
		# This is the XML file that contains all the global, non-apache-specific
		# configuration.  Look at this file for most of your configuration parameters.
		#
		# ShibSchemaDir /opt/shibboleth-sp/share/xml/shibboleth
		ShibConfig $hashOfVariables{'server_root'}/addons/shibboleth/shibboleth.xml

		<Files *.sso>
			SetHandler shib-handler
		</Files>
	};
}


####
#### First, set up the HSDB virtual host
####
my $loc_list = httpdconf::defineLocations(\%hashOfVariables);
my $alias_list = httpdconf::defineAliases(\%hashOfVariables);

# And now create the host 
push @PerlConfig, qq{ 
	<Directory $hashOfVariables{'code_root'}>
	  Options FollowSymLinks
	</Directory>

	<VirtualHost $hashOfVariables{'ip_address'}:$hashOfVariables{'main_port'}>
	  ServerName $hashOfVariables{'server_name'}
	  ServerAdmin $hashOfVariables{'server_admin'}

	  DocumentRoot $hashOfVariables{'code_root'}/htdocs

	  <IfModule mod_gzip.c>
		mod_gzip_on                   Yes
		mod_gzip_can_negotiate        Yes
		mod_gzip_static_suffix .gz
		AddEncoding gzip .gz
		mod_gzip_update_static No
		mod_gzip_temp_dir             /tmp
		mod_gzip_keep_workfiles       No
		mod_gzip_minimum_file_size    500
		mod_gzip_maximum_file_size    500000
		mod_gzip_maximum_inmem_size   60000
		mod_gzip_min_http             1000
		mod_gzip_handle_methods GET POST
		mod_gzip_item_include         file       .*\$
		mod_gzip_item_exclude         file       .gif\$
		mod_gzip_item_exclude         file       .jpg\$
		mod_gzip_item_exclude         file       .avi\$
		mod_gzip_item_exclude         file       .pdf\$
		mod_gzip_item_exclude         file       .zip\$
		mod_gzip_dechunk              Yes
		mod_gzip_add_header_count     Yes
		mod_gzip_send_vary Yes
	  </IfModule>

	  DocumentRoot $hashOfVariables{'code_root'}/htdocs

	    RewriteEngine On
	    RewriteCond %{HTTP:X-Moz} ^prefetch*
	    RewriteRule ^.* - [F]

	    RewriteCond  %{HTTP_HOST}  ^hsdb\.hsl\.tufts\.edu.*
	    RewriteRule /(.*) http://$hashOfVariables{'server_name'}/\$1 [R]

	    RewriteCond  %{HTTP_HOST}  ^www\.hsdb\.tufts\.edu.*
	    RewriteRule /(.*) http://$hashOfVariables{'server_name'}/\$1 [R]

	    RewriteCond  %{HTTP_HOST}  ^dev\.hsdb\.tufts\.edu.*
	    RewriteRule /(.*) http://finch.tusk.tufts.edu:$hashOfVariables{'main_port'}/\$1 [R]

	    RewriteRule /graphics/logo.gif $hashOfVariables{'elephantLogo'} [PT]


	RewriteRule ^/\$ /home [PT]
	RewriteRule ^/index.html\$ /home [PT]

	RewriteRule ^/mobi/\$ /mobi/home [PT]
	RewriteRule ^/mobi/index.html\$ /mobi/home [PT]

	RewriteRule ^/public/(.*)\$ /nosession/\$1 [PT]
    RewriteRule ^/(tools|ws|public|search|service|case|quiz|assignment|gradebook|patientlog|sp|assessment|management|eval|ocw|admin|registrar)/(.*) /tusk/\$1/\$2 [PT] 
	RewriteRule ^/lb\$ /nosession/lb [PT]

	RedirectMatch ^/hsdb4/schedule/(.*)\$ /view/schedule/\$1
	RedirectMatch ^/hsdb45/schedule/(.*)\$ /view/schedule/\$1
	RedirectMatch ^/hsdb45/eval/report/(.*)\$ /tusk/eval/report/\$1
	RedirectMatch ^/hsdb4/concept/(.*)\$ /view/concept/\$1
	RedirectMatch ^/hsdb4/concept\$ /search/form
	RedirectMatch ^/hsdb45/course/(.*)\$ /view/course/\$1
	RedirectMatch ^/hsdb4/content/(.*)\$ /view/content/\$1
	RedirectMatch ^/hsdb4/url_frame/(.*)\$ /view/url/\$1
	RedirectMatch ^/hsdb4/personal_content(.*)\$ /tusk/management/content/personalcontent\$1
	RedirectMatch ^/tusk/download(.*)\$ /download\$1
	RedirectMatch ^/allcourses.htm(.*)\$ /tusk/allcourses.htm\$1

	RedirectMatch ^/hsdb45/stylesheet/(.*)\$ /eval/administrator/filter_addedit/\$1
	RedirectMatch ^/hsdb45/stylesheet_list/(.*)\$ /eval/administrator/filter_show/\$1
	RedirectMatch ^/external_link/(.*)\$ /tusk/auth/external/\$1

	  PerlSetEnv HSDB_GUEST_USERNAME HSDB-Guest
	  PerlSetEnv HSDB_DATABASE_NAME hsdb4
	  PerlSetEnv HSDB_DATABASE_USER	$hashOfVariables{'hsdbDatabaseUser'}
	  PerlSetEnv HSDB_DATABASE_PASSWORD $hashOfVariables{'hsdbDatabasePassword'}

	  ErrorDocument 404 /tusk/server/http/error/missing

	  $alias_list
	  $loc_list

	  PerlWarn On
	</VirtualHost>
};




##
## SSL Section, create a virual host for SSL
##
if (Apache->define("SSL")) {
  my $ssl_loc_list = httpdconf::defineSSLLocations();
  my $shibLoc;
  if($useShibboleth && $shibbolethSP && ($shibbolethSP eq $hashOfVariables{'server_name'})) {
	$shibbolethAlias = qq {
		Alias /shibboleth-login/ $hashOfVariables{'code_root'}/tusk_no_session/shibboleth/
		Alias /shibboleth-logout/ $hashOfVariables{'code_root'}/tusk_no_session/shibboleth/
	};
	$shibLoc = qq {
		<Location /shibboleth-logout/>
			SetHandler    perl-script
			PerlHandler     TUSK::MasonNoSession
			Options       +ExecCGI
			DefaultType     text/html
			
			ErrorDocument 404 /shibboleth-logout/logout
		</Location>

		<Location /shibboleth-login/>
			SetHandler    perl-script
			PerlHandler     TUSK::MasonNoSession
			Options       +ExecCGI
			DefaultType     text/html
			
			ErrorDocument 404 /shibboleth-login/provision

			AuthType shibboleth
			ShibRequireSession On
			require valid-user
			Options Indexes FollowSymLinks MultiViews +ExecCGI
			AllowOverride None
			Order allow,deny
			Allow from all
		</Location>
		

		<Location /Shibboleth.sso>
			SetHandler shib-handler
		</Location>

		#
		# Configure the module for content
		#
		# You can now do most of this in shibboleth.xml using the RequestMap
		# but you MUST enable AuthType shibboleth for the module to process
		# any requests, and there MUST be a require command as well. To
		# enable Shibboleth but not specify any session/access requirement
		# use "require Shibboleth".
		#
	};
	my $shibbolethUsers = TUSK::Shibboleth::User->new->lookup();
	foreach my $shibUserObject (@{$shibbolethUsers}) {
		if($shibUserObject->ifIsEnabled()) {
			my $schoolId = $shibUserObject->getShibbolethUserID();
			$shibLoc.= "<Location /shibboleth-login/provision/$schoolId>\n\tShibRequireSessionWith $schoolId\n</Location>\n"
		}
	}
  }

  my $conf_str = qq{
        AddType application/x-x509-ca-cert .crt
        AddType application/x-pkcs7-crl    .crl
        SSLSessionCache dbm:$hashOfVariables{'log_root'}/ssl_cache
        SSLSessionCacheTimeout  300
        SSLMutex  file:$hashOfVariables{'log_root'}/ssl_mutex
        SSLPassPhraseDialog builtin
        SSLRandomSeed startup builtin
        SSLRandomSeed connect builtin
        SSLLog $hashOfVariables{'log_root'}/ssl_log 
        SSLLogLevel warn

      <VirtualHost $hashOfVariables{'ip_address'}:$hashOfVariables{'secure_port'}>
        ServerName $hashOfVariables{'server_name'}
        SSLEngine on
        SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
  	PerlSetEnv HSDB_GUEST_USERNAME HSDB-Guest
  	PerlSetEnv HSDB_DATABASE_NAME hsdb4
  	PerlSetEnv HSDB_DATABASE_USER $hashOfVariables{'hsdbDatabaseUser'}
  	PerlSetEnv HSDB_DATABASE_PASSWORD  $hashOfVariables{'hsdbDatabasePassword'}

	SSLCertificateFile $hashOfVariables{'ssl_root'}/$hashOfVariables{'ssl_cert_file'}
	SSLCertificateKeyFile $hashOfVariables{'ssl_root'}/$hashOfVariables{'ssl_key_file'}
  };

  if ( httpdconf::useCACert ) {
    $conf_str .= qq{
	SSLCACertificateFile $hashOfVariables{'ssl_root'}/$hashOfVariables{'ssl_ca_cert_file'}
    };
  }

  $conf_str .= qq{
	####
	#### This is to forward requests to the proper URL, keeps the user's session valid
	####
	RewriteEngine On
	RewriteCond  %{HTTP_HOST}  ^hsdb\.hsl\.tufts\.edu.*
	RewriteRule /(.*) https://$hashOfVariables{'server_name'}:$hashOfVariables{'secure_port'}/\$1 [R]
	RewriteCond  %{HTTP_HOST}  ^www\.hsdb\.tufts\.edu.*
	RewriteRule /(.*) https://$hashOfVariables{'server_name'}:$hashOfVariables{'secure_port'}/\$1 [R]
	RewriteCond  %{HTTP_HOST}  ^www\.tusk\.tufts\.edu.*
	RewriteRule /(.*) https://$hashOfVariables{'server_name'}:$hashOfVariables{'secure_port'}/\$1 [R]
	RewriteRule ^/cms/?(.*)    /cms/index.html
	RedirectMatch ^/hsdb45/schedule/(.*)\$ /view/schedule/\$1
	RedirectMatch ^/hsdb45/course/(.*)\$ /view/course/\$1
	RedirectMatch ^/hsdb4/content/(.*)\$ /view/content/\$1
	RedirectMatch ^/hsdb4/url_frame/(.*)\$ /view/url/\$1
	RedirectMatch ^/hsdb4/personal_content(.*)\$ /tusk/management/content/personalcontent\$1
	RedirectMatch ^/tusk/download/(.*)\$ /download/\$1
	RedirectMatch ^/allcourses.htm(.*)\$ /tusk/allcourses.htm\$1
	RedirectMatch ^/shibboleth/?\$ /shibboleth/provision.pl
	RedirectMatch ^/eval45(.*)\$ /eval/complete/\$1

	RewriteRule /graphics/logo.gif $hashOfVariables{'elephantLogo'} [R]


    RewriteRule ^/public/(.*)\$ /nosession/\$1 [PT]
	RewriteRule ^/(tools|ws|public|search|service|case|quiz|assignment|gradebook|patientlog|sp|assessment|management|eval|ocw|registrar)/(.*) /tusk/\$1/\$2 [PT] 
	RewriteRule ^/lb\$ /nosession/lb [PT]

	DocumentRoot $hashOfVariables{'code_root'}/secure

	Alias /icons/ $hashOfVariables{'server_root'}/graphics/icons/
	Alias /style/ $hashOfVariables{'code_root'}/style/
  	Alias /scripts/ $hashOfVariables{'code_root'}/scripts/
	Alias /graphics/ $hashOfVariables{'server_root'}/graphics/
	Alias /addons/ $hashOfVariables{'server_root'}/addons/
	Alias /tusk/ $hashOfVariables{'code_root'}/tusk/
	Alias /temp/ /data/temp/
	Alias /public/ $hashOfVariables{'code_root'}/tusk/public/
	Alias /nosession/ $hashOfVariables{'code_root'}/tusk_no_session/
	$shibbolethAlias

	  ErrorDocument 500 /tusk/server/http/error/server

	<Location />
		SetHandler perl-script
		Options ExecCGI
		DefaultType text/html
		AuthType HSDB
		AuthName HSDB
		PerlAuthenHandler Apache::TicketAccess
		 Redirect	/unprotected/  $hashOfVariables{'unsecure_loc'}
    		ErrorDocument 404 /tusk/server/http/redirect_to_insecure
    		ErrorDocument 403 /tusk/server/http/redirect_to_insecure
  	</Location>

	$ssl_loc_list
	$shibLoc
    </VirtualHost>
    };

	push @PerlConfig, $conf_str;
}

# This is pretty untested (since we cant test it at Tufts)!
if($useShibboleth && $shibbolethSP && ($shibbolethSP ne $hashOfVariables{'server_name'})) {
	if($shibSecurePort ne $hashOfVariables{'secure_port'}) {
		push @PerlConfig, qq{
			Listen      $shibSecurePort
		};
	}
	push @PerlConfig, qq{
		<VirtualHost $hashOfVariables{'ip_address'}:$shibSecurePort>
			ServerName $shibbolethSP
			DocumentRoot $hashOfVariables{'code_root'}/tusk/shibboleth
			SSLEngine on
			SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
			PerlSetEnv HSDB_GUEST_USERNAME HSDB-Guest
			PerlSetEnv HSDB_DATABASE_NAME hsdb4
			PerlSetEnv HSDB_DATABASE_USER $hashOfVariables{'hsdbDatabaseUser'}
			PerlSetEnv HSDB_DATABASE_PASSWORD  $hashOfVariables{'hsdbDatabasePassword'}

			SSLCertificateFile $hashOfVariables{'ssl_root'}/$hashOfVariables{'ssl_cert_file'}
			SSLCertificateKeyFile $hashOfVariables{'ssl_root'}/$hashOfVariables{'ssl_key_file'}

			#
			# You can now do most of this in shibboleth.xml using the RequestMap
			# but you MUST enable AuthType shibboleth for the module to process
			# any requests, and there MUST be a require command as well. To
			# enable Shibboleth but not specify any session/access requirement
			# use "require Shibboleth".
			#
			<Location />
				AuthType shibboleth
				ShibRequireSession On
				require valid-user
				Options Indexes FollowSymLinks MultiViews +ExecCGI
				AllowOverride None
				Order allow,deny
				Allow from all
			</Location>
		</VirtualHost>
	};
  }

# debugging output
unless(open APACHEOUT, ">$FindBin::Bin/../conf/conf.out") {print STDOUT "Unable to open conf/conf.out for write : $!\n";}
else {
  print APACHEOUT join '',@PerlConfig;
  close APACHEOUT;
  print STDERR "A copy of the httpd.conf used can be found in conf/conf.out\n\n";
}

__END__
</Perl>
