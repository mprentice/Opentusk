<%shared>
	my ($school, $school_id, $competencies, $children_storage, $c_href);
</%shared>

<%perl>
	foreach( @{TUSK::Core::Competency->new()->lookup()} ) {
		$competencies->{$_->getCompetencyID} = $_;
	}

	$school    = $m->comp("/tmpl/url:get_school");
	$school_id = TUSK::Core::School->new->getSchoolID($school);
</%perl>

<& /tmpl/element:cms_button_row, 
    links => [ 
              { display_txt => 'Manage Competency Types',
                link_txt    => '/management/competency/typelist/' . $m->comp("/tmpl/url:get_type_path")},
	         ]
&>

<%perl>
	my $data = $m->comp( 'SELF:buildCompetencyTree', school_id => $school_id );
	my $competency_types = TUSK::Core::CompetencyType->new()->lookup( 'school_id = ' . $school_id );
	my $types = [ map { label => $_->getDescription, value => $_->getCompetencyTypeID }, @{$competency_types} ];
</%perl>

<& /tmpl/element:jquery_sort_list, params =>{
				width => "100%",
				label => 'Competencies',
				no_table => 1,
				no_striping => 1,
				container => 'competency_container',
				name => 'competencies',
				sort => 1,
				button_label => 'Add Competency',
				action_width => 170,
				action_columns => [ 
							{ 'label' => 'Modify',    'onclick' => 'editRow( this, params );' },
							{ 'label' => 'Add Child', 'onclick' => 'addNewRow( this, params );' },
							{ 'label' => 'Delete',    'onclick' => 'deleteRow( this, params );' } 
			  			], 
				fields => [
					{ hide  => 1, field => 'id', },
					{ label => 'Title', field => 'title', head_align => 'left', align => 'left', edit =>
						{ type      => 'text',
						  classname => 'textareawhite',
						  size      => 30,
						  maxlength => 255 }
					},
					{ label => 'Description', field => 'description', head_align => 'left', align => 'left', edit =>
						{ type      => 'textarea',
						  classname => 'textareawhite',
						  rows      => 5,
						  cols      => 25 }
					},
					{ label => 'Type(s)', field => 'types', head_align => 'left', align => 'left', width => 150, edit =>
						{ type      => 'checkbox',
						  classname => 'textareawhite',
						  options   => $types,
						  delimiter => ', ' }
					},
				],
				data => $data, 
				post_to => '/management/competency/ajaxUpdate/' . $school,
				empty_message => "No competencies exist."
} &>

<%method startup>
%	$m->comp("SELF:set_no_cache");
</%method>

<%method jsarray>
<%perl>
	return [ 
			"jquery/jquery.min.js",
			"jquery/plugin/interface/interface.js",
			"jquery/plugin/json.js",
			"jquery/plugin/inestedsortable-1.0.1.pack.js",
			"jqNestedSortableFunctions.js" 
			];
</%perl>
</%method>

<%method buildCompetencyTree>
<%args>
	$school_id
</%args>
<%perl>
	my %p_c_pairs;
	my $cr = TUSK::Core::CompetencyRelationship->new()->lookup( 'school_id = ' . $school_id, ['depth desc', 'parent_competency_id', 'sort_order'] );
	foreach my $cr_row ( @{$cr} ) {
		my $child_comp = $competencies->{$cr_row->getChildCompetencyID()};
		if ( !defined( $c_href->{$child_comp->getCompetencyID} ) ) {
			$c_href->{$child_comp->getCompetencyID} = { 
														id          => $child_comp->getCompetencyID, 
														title       => $child_comp->getTitle,
														description => $child_comp->getDescription,
														types       => $child_comp->displayTypes,
														children    => $children_storage->{$child_comp->getCompetencyID},
													  };
		}
		if ( !$p_c_pairs{$cr_row->getParentCompetencyID() . "-" . $child_comp->getCompetencyID} ) {
			$p_c_pairs{$cr_row->getParentCompetencyID() . "-" . $child_comp->getCompetencyID} = 1;
			push @{$children_storage->{$cr_row->getParentCompetencyID()}}, $c_href->{$child_comp->getCompetencyID} 
		}
	}
	return $children_storage->{'0'};
</%perl>
</%method>

<%method red_header_text>
% return $m->comp( "SELF:title" );
</%method>

<%method title>
% return "Manage Competencies";
</%method>

