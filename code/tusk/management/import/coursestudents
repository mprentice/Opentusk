<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::Import;
	use TUSK::Import::Structure;
	use HSDB4::Constants;
	use HSDB45::UserGroup;
    use HSDB45::TimePeriod;
</%once>

<& /tmpl/element:form, params => {
	method => 'POST',
	class => 'no-padding',
	enctype => 'multipart/form-data',
	onsubmit =>'return checkform(this);',
	name => 'data_form' } &>

<& /tmpl/element:table, params => { 
	width => "100%",
	border =>"0",
	cellspacing =>"0",
	cellpadding =>"0" } &>

<tr>
<td class="labelgray">Import type:</td><td class="cell-left"><table class="tusk" width="50%"><tr><td>Test<input type="radio" name="save" value="0" checked></td><td align="right">Live<input type="radio" name="save" value="1"></td></tr></table><br>"Test" verifies data, but does not save. "Live" verifies and saves data.</td>
</tr>
% if ($m->comp('/tmpl/url:get_school') ) {
<input type="hidden" name="school" value="<% $m->comp('/tmpl/url:get_school') %>">
<tr><td class="labelgray">School: </td><td class="cell-left"><% $m->comp('/tmpl/url:get_school') %></td></tr>
% } else {
<tr><td class="labelgray">School: </td>
<td class="cell-left"><td class="cell-left">school not provided</td></tr>
% }

<tr><td class="labelgray">Time Period: </td>
<td class="cell-left">
<select name="time_period_id">
<option value="0">no time period</option>
% foreach my $tp (@time_periods) {
<option value="<% $tp->primary_key %>"><% $tp->out_label %></option>
% }
</select>  Choose a time period, or select "no time period" if the time period is in the file.
</td></tr>

<tr>
<td class="labelgray">Fields in File:</td>
<td class="cell-left">
<input type="radio" name="preset_fields" value="preferred"> Preferred (course_code, user_id, time_period, academic_year, teaching_site)
<br>
<input type="radio" name="preset_fields" value="self"> <input name="fields" value="<% $ARGS{fields}%>" size="50" class="textareawhite"><br>
Either select the preferred import format, or list the fields in the import file, separated by commas. The uploaded file should be tab-delimited, and should not contain a row of column names.
</td>
</tr>

<tr>
<td class="labelgray">Limit Results:</td>
<td class="cell-left">
Field: <input name="limit_field" value="<% $ARGS{limit_field} %>" size="20" class="textareawhite"> &nbsp;&nbsp;Value: <input name="limit_value" value="<% $ARGS{limit_value} %>" size="20" class="textareawhite"><br>
Enter a field name, and a corresponding value to limit the import to those records only.
</td>
</tr>

<tr>
<td class="labelgray">File:</td><td class="cell-left"><input type="file" name="datafile" class="formbutton" id="File__y"></td>
</tr>

<tr>
<td>&nbsp;</td><td class="cell-submit"><input type="submit" value="Process" class="formbutton"></td>
</tr>
</table>
</form>
<h4>Alerts:</h4>
% foreach my $err (@err_logs) {
	<div class="error"><% $err %></div>
% }
% foreach my $log (@logs) {
%	 if ($log->get_type =~ /(error)/) {
		<div class="<% $log->get_type %>"><% $log->get_message %></div>
%	}
% }
<h4>Messages:</h4>
% foreach my $log (@logs) {
	<div class="<% $log->get_type %>"><% $log->get_type %> <% $log->get_message %></div>
% }


<%init>

	my $fail = 0;
	my @logs;
	my @err_logs;
	if ($ARGS{'datafile'}) {
		my $import = TUSK::Import->new;
		$import->add_log("error","test run, course links will not be created") unless ($ARGS{'save'});

		my $db_user = $TUSK::Constants::DatabaseUsers->{ContentManager}->{writeusername};
		my $db_password = $TUSK::Constants::DatabaseUsers->{ContentManager}->{writepassword};
		my $struct = TUSK::Import::Structure->new;
		## this set of conditionals is to account for different kinds of files, from different schools
		my @file_fields;
		if ($ARGS{'preset_fields'} eq "preferred") {
			@file_fields = qw(course_code user_id time_period academic_year teaching_site);
		} else {
			## clear out any unnecessary spaces
			$ARGS{'fields'} =~ s/\ //g;
			@file_fields = split(",",$ARGS{'fields'});
		}
		$import->set_fields(@file_fields);
		
		my $upload = $r->upload();
	    $import->read_filehandle($upload->fh(),"\t") if ($upload);

		##$import->read_filehandle($ARGS{'datafile'},"\t");

		if ($ARGS{'limit_field'} && $ARGS{'limit_value'}) {
			$import->grep_records($ARGS{'limit_field'},$ARGS{'limit_value'});
		    	$import->add_log("summary","limiting records to where $ARGS{'limit_field'} = $ARGS{'limit_value'}");
		}
		my $line_no = 0;
		foreach my $record ($import->get_records) {
			$line_no++;
			## get the user object
			my $user = HSDB4::SQLRow::User->new;
			if (join("-",$import->get_fields) =~ /sid/) {
				my @users = $user->lookup_conditions("sid='".$record->get_field_value("sid")."'");
				push (@users,$user->lookup_conditions("tufts_id='".$record->get_field_value("sid")."'"));
				if (scalar @users != 1) {
					#$import->add_log("error",$record->get_field_value("sid")." ".$record->get_field_value("name"));
					$import->add_log("error","Record $line_no - User ".$record->get_field_value("sid").
							" not found in TUSK");
					next;
				}
				$user = $users[0];
			} elsif (join("-",$import->get_fields) =~ /user_id/) {
				$user->lookup_key($record->get_field_value("user_id"));
			}

			if (!$user->primary_key) {
				$import->add_log("error","Record $line_no - User ".$record->get_field_value("user_id").
							" not found in TUSK");
				next;
			}
			my $user_id = $user->primary_key;

			## get the course object
			my $course;
			my @set;

			if (join("-",$import->get_fields) =~ /course_id/) {
				$course = HSDB45::Course->new(_school => $m->comp('/tmpl/url:get_school'), _id => $record->get_field_value("course_id"));
				if (!$course->primary_key) {
					$import->add_log("error","Record $line_no - Cannot find course ".
							$record->get_field_value("course_id")." in TUSK");
					next;					
				}
			} else {
				$course = HSDB45::Course->new(_school => $m->comp('/tmpl/url:get_school') );				
				@set = $course->lookup_conditions("oea_code='".$record->get_field_value("course_code")."'");

				if (scalar @set != 1) {
					$import->add_log("error","Record $line_no - Cannot find course ".
							$record->get_field_value("course_code")." in TUSK");
					next;
				} else {
					$course = $set[0];
				}
			}

			## get the time period
			my $time_period_id;
			if ($ARGS{'time_period_id'}) {
				$time_period_id = $ARGS{'time_period_id'}; 
			} else {

				eval { $record->get_field_value("time_period") && $record->get_field_value("academic_year") };

				if($@) {
					$import->add_log("error","Record $line_no - FILE IS MISSING FIELDS ");
					last;
				} else {
					my $timeref = HSDB45::TimePeriod->new( _school => $m->comp('/tmpl/url:get_school'));
    					@set = $timeref->lookup_conditions("period='".$record->get_field_value("time_period").
						"' AND academic_year='".$record->get_field_value("academic_year")."'");
					if (scalar @set != 1) {
						$import->add_log("error","Record $line_no - Cannot find time period ".
								$record->get_field_value("time_period")." in TUSK");
						next;
					} else {
						$time_period_id = $set[0]->primary_key;
					}
					
				}
			}			

			my %courseTeachingSites;
			my $teaching_site;
			foreach ($course->child_teaching_sites()) {$courseTeachingSites{$_->primary_key} = 1;}

			if (join("-",$import->get_fields) =~ /teaching_site/) {
				## look up  the teaching site
				@set = HSDB45::TeachingSite->new(_school => $m->comp('/tmpl/url:get_school'), _id => $record->get_field_value("teaching_site"));
				if( scalar @set != 1) {
					$import->add_log("warning","Record $line_no - Cannot find teaching site ".
						$record->get_field_value("teaching_site")." using none");
					next;
				} else {
					$teaching_site = $set[0]->primary_key;
					unless(exists($courseTeachingSites{$teaching_site})) {
						$import->add_log("error", "Record $line_no - Teaching site ". $record->get_field_value("teaching_site") . " is not linked to course");
						next;
					}
				}
			}

        	        ## see if the user is in the course
			my $msg;
			@set = $course->child_students("user_id='".$user_id."'","time_period_id=".$time_period_id);
			if (@set > 0) {
				$import->add_log("message","Record $line_no - $user_id already in course ".
					$course->primary_key);
				next; 
			} else {
				if ($ARGS{'save'}) {
					($r,$msg) = $course->add_child_student($db_user,$db_password,$user_id,$time_period_id, $teaching_site);
				}
				if ($r) {
					$msg = "OK";
				}
				my $line = "Record $line_no - adding $user_id to course ". $course->primary_key ." for period $time_period_id, teaching site ";
				if($teaching_site) {$line .= $teaching_site;} else {$line .= "None";}
				if($msg) {$line .= " - $msg";}
				$import->add_log("message",$line);
			}
		}

		$import->add_log("summary","processing ".scalar $import->get_records." records");
		@logs = $import->get_logs;
		@err_logs = @{$import->get_err_msgs};
	}
my $tp = HSDB45::TimePeriod->new(_school => $m->comp('/tmpl/url:get_school'));
my @time_periods = $tp->nonpast_time_periods;

</%init>

<%method title>
% return "Import Students";
</%method>

<%method red_header_text>
% return $m->comp("SELF:title");
</%method>

<%method jsarray>
% return ['element.js', 'calendar.js','calendar-en.js','calendar-setup.js'];
</%method>
