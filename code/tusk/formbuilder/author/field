<<%once>
	use TUSK::FormBuilder::Field;
	use TUSK::FormBuilder::FieldType;
	use TUSK::FormBuilder::Form;
	use TUSK::FormBuilder::ItemType;
	use TUSK::FormBuilder::AttributeType;
	use TUSK::FormBuilder::LinkFieldField;
 	use TUSK::FormBuilder::Constants;
</%once>

<%shared>
	my $ids = $m->comp("/tmpl/url:get_path_ids");
	my $id = (scalar @{$ids} == 2) ? $ids->[-1] : 0;
	my $is_edit = 0;
	my $form_name = 'fieldedit';
	my $field;
	my $items = [];
	my $items_data = [];
	my $attributes = [];
	my $attributes_data = [];
	my $attribute_display = "none";
	my $fillin_display = "";
	my $field_app;
	my $item_display = '';
	my $required_display = '';
	my $show_other_fields_display = '';
	my $isDynamicList;
	my $attribute_type_options = [];
	my $item_type_options = [];
	my $item_type_hash = {};

	if ($id) {
		$is_edit = 1;
		$field = TUSK::FormBuilder::Field->new()->lookupKey($id);
		$items = $field->getItems();
		$attributes = $field->getAttributes();

		$fillin_display = "none" unless ($field->isFillIn());
		$attribute_display = "" if ($field->isMultiSelectWithAttributes() || $field->isCheckList());
		$item_display = 'none' if ($field->isFillIn() || $field->isEssay());
		if ($field->isHeading()) {
			$item_display = 'none';
			$required_display = 'none';
			$show_other_fields_display = 'none';
		}
	} else {
		$field = TUSK::FormBuilder::Field->new();
	}

	foreach my $item (@$items){
		push (@$items_data, { 'item_id' => $item->getPrimaryKeyID(), 'name' => $item->getItemName(), 'allow_user_defined_value' => $item->getAllowUserDefinedValue(), 'abbreviation' => $item->getAbbreviation(), 'content_id' => $item->getContentID(), 'item_type' => $item->getItemTypeID() } );
	}

	foreach my $attribute (@$attributes){
		push (@$attributes_data, { 'attribute_id' => $attribute->getPrimaryKeyID(), 'name' => $attribute->getAttributeName(), 'attribute_type' => $attribute->getAttributeTypeID() } );
	}

	my $item_types = TUSK::FormBuilder::ItemType->new()->lookup();
	foreach my $item_type (@$item_types){
		push (@$item_type_options, {'label' => $item_type->getShortLabel(), 'value' => $item_type->getPrimaryKeyID()});
		$item_type_hash->{$item_type->getPrimaryKeyID()} = $item_type->getToken();
	}

	my $attribute_types = TUSK::FormBuilder::AttributeType->new()->lookup();
	foreach my $attribute_type (@$attribute_types){
		push (@$attribute_type_options, {'label' => $attribute_type->getLabel(), 'value' => $attribute_type->getPrimaryKeyID()});
	}
</%shared>


<%method title>
% 	return ($is_edit) ? "Modify Field" : "Create New Field";
</%method>


<%method jsarray>
% 	return ['layers.js', 'formbuilder.js', 'element.js'];
</%method>


<%method get_nav_bar_objects>
<%perl>
	my $form = $m->comp("/formbuilder/util:get_form");
	return { 'TUSK::FormBuilder::Form' => $form };
</%perl>
</%method>


<%method page>
<%args>
	$args
	$form
	$form_token => undef
</%args>

% $isDynamicList = ($args->{dynamic} || $field->isDynamicList()) ? 1 : 0;

<& SELF:action, args => $args, form => $form &>

<& /tmpl/element:form, params => {
	method => 'POST',
	onsubmit => 'return fieldaddedit_submit(this)',
	name => $form_name } &>

<& /tmpl/wizard:include &>

<& /tmpl/element:table, params => { width => "100%",
                border => "0",
                cellspacing => "0",
                cellpadding => "0" } &>

<& /tmpl/element:textbox, params =>{ label => 'Field Name',
                name => 'field_name',
                value => $field->getFieldName(),
                size => 60,
                length => 100 } &>

<& /tmpl/element:dropdown, params=>{ label => 'Required',
	name => "required",
	selected => $field->getRequired(),
	style => 'display:' . $required_display,
    options => [ { label => 'No', value => '0'}, { label => 'Yes', value => '1' } ] } &>

<& SELF:display_fields, form_token => $form_token &>

% my $button_text =  $m->scomp('/tmpl/element:button', params => {
%	onclick => "layers['itemsdiv'].adddata({item_id:'0', name:'', abbreviation:'', content_id:''},0);",
%	name => 'addnewitem',
%	label => 'Add New Item'});

<& /tmpl/element:sort_order_box , params =>{
	no_add_button => '1',
	label => 'Items',
	style => ($args->{dynamic}) ? '' : 'display:' . $item_display,
	name => "items",
	buttons => [$button_text],
	layer_info => {
		empty_message => 'No items defined for this field',
		layer => 'itemsdiv',
		scrollrows => 6,
       	fields => ['item_id','name', 'abbreviation'],
		name => 'item',
		sort => { usage => 'Yes', length => 50},
		action => { usage => 'Yes', length => 100, functions => [ { func => 'remove', label => 'Delete'} ] },
		display => [
			{ label => 'Name', field => 'name', type => 'textbox', align => 'left', length => 400 },
			{ label => 'Content ID', field => 'content_id', type => 'textbox', align => 'center', length => 50 },
			{ label => 'Abbr.', field => 'abbreviation', type => 'textbox', align => 'center', length => 40 },
			{ label => 'Type', field => 'item_type', align => 'center', length => '200', options => $item_type_options },
			{ label => 'Allow Other', field => 'allow_user_defined_value', align => 'center', length => '200', options => [ { label => 'No', value => '0' }, { label => 'Yes', value => '1' }] },
		],
		validate => { usage => 'No', },
		data => $items_data }
} &>

% $button_text =  $m->scomp('/tmpl/element:button', params => {
%	onclick => "layers['attributesdiv'].adddata({attribute_id:'0', name:''},0);",
%	name => 'addnewattribute',
%	label => 'Add New Attribute'});


<& /tmpl/element:sort_order_box , params => {
	no_add_button => '1',
	label => 'Attributes',
	style => 'display:' . $attribute_display,
	name => "attributes",
	buttons => [$button_text],
	layer_info => {
		context_path => $m->comp("/tmpl/url:get_full_path"),
		base_path => $m->comp("/formbuilder/util:get_base_dir"),
		empty_message => 'No attributes defined for this field',
        layer => 'attributesdiv',
        fields => ['attribute_id','name', 'attribute_type'],
        name => 'attribute',
		scrollrows => 2,
		sort => { usage => 'Yes', length => 50},
		action => { 
			usage => 'Yes', 
			length => 100, 
			functions => [ 
				{ func => 'attribute_modify', label => 'Modify&nbsp;Items'},
				{ func => 'remove', label => 'Delete'} ] },
		display => [
			{ label => 'Name', field => 'name', type => 'textbox', align => 'left', length => 300 }, 
			{ label => 'Type', field => 'attribute_type', align => 'center',  length => '200', options => $attribute_type_options },],
		validate => { usage => 'No', form => 'fieldedit',},
		data => $attributes_data }
} &>

<& /tmpl/element:textbox, params => { 
	label => 'Field Description',
	name=> 'field_description',
	size=> "30",
	tr_name => "other_field1",
	tr_style => "display:none;",
	value=> $field->getFieldDescription()  } &>

<& /tmpl/element:textbox, params=>{ 
	label => 'Field Abbreviation',
	name => 'abbreviation',
	size => "30",
	tr_name => "other_field2",
	tr_style => "display:none;",
	value => $field->getAbbreviation()  } &>

<& /tmpl/element:textbox, params => { 
	label => 'Trailing Text',
	name => 'trailing_text',
	value => $field->getTrailingText(),
	size => 60,
	tr_name => "other_field3",
	tr_style => "display:none;",
	length => 100 } &>

<& /tmpl/element:dropdown, params => { 
	label => 'Private',
	name => "private",
	tr_name => "other_field4",
	tr_style => "display:none;",
	selected => $field->getPrivate(),
	options => [ { label => 'No', value => '0'}, { label => 'Yes', value => '1' } ] } &>

% 	my $buttons = [ "<span style=\"display:$show_other_fields_display\">" . 
%		$m->scomp('/tmpl/element:button', params => {
%		onclick => "show_trs(4, this, 'Other Fields', 'other_field')",
%		name=> 'advanced_button',
%		label=> 'Show Other Fields' }) . "</span>"];

<& /tmpl/element:save_button, params=>{label=>'Save Changes',
		buttons => $buttons,
        cancel_onclick => "go_back('" . $m->comp("/tmpl/url:construct_back_url", base_url => $m->comp("/formbuilder/util:get_base_dir") . '/addedit', is_edit =>  $is_edit) . "');",
        name=>'form_submit'} &>

<& SELF:display_dynamic_fields_list, form => $form &>

</table>
</form>
</%method>


<%method display_fields>
<%args>
	$form_token => undef
</%args>

% if ($isDynamicList) {
% my $dynamic_type = TUSK::FormBuilder::FieldType->new()->lookupReturnOne("token = 'DynamicList'");
<& /tmpl/element:field_display, params=>{ 
	label => "Field Type",
	value => $dynamic_type->getLabel(), } &>

<& /tmpl/element:hidden_form_element, params => { 
	name=> "field_type_id",
	value => $dynamic_type->getPrimaryKeyID(), } &>

% } else {
% 	my $select_label = TUSK::FormBuilder::FieldType->new();
% 	$select_label->setLabel('Select');	
%	my $field_types = TUSK::FormBuilder::FieldType->new()->getFieldTypes($form_token);

<& /tmpl/element:dropdown, params => { 
	label => 'Field Type',
	name => "field_type_id",
	onchange => "change_display(this);",
	selected => $field->getFieldTypeDropDownValue(),
	options => $m->comp("/tmpl/element:make_dropdown_options", arrayref => [ $select_label, @$field_types], label => "getLabel", value => "getDropDownValue") } &>
% }

<& /tmpl/element:dropdown, params => { 
	label => 'Item Sort',
	name => "item_sort",
	onchange => "",
	selected => $field->getItemSort(),
	options => [{ label => 'Alphanumeric', value => 'Alphanumeric'}, { label => 'User-Defined', value => 'User-Defined' } ] } &>

<%doc>
 In case we don't want default behavior in report, caller could pass an empty string
</%doc>
% if (defined $form_token) {  ### include empty string,
%	if ($form_token) {     ### do nothing if empty string
<& "getDefaultReport$form_token" &>
%	}
% } else {  ### default behavior
<& /tmpl/element:dropdown, params => { 
 	label => 'Default Report',
 	name => "default_report",
 	onchange => "",
 	selected=> $field->getDefaultReport(),
 	options => [ { label => 'No', value => '0'}, { label => 'Yes', value => '1' } ] } &>
% }

<& /tmpl/element:textbox, params => { 
	label => 'Size',
	name=> "fillin_size",
	size=> 30,
	style => 'display:' . $fillin_display,
	value=> $field->getFillinSize() } &>

</%method>


<%method display_dynamic_fields_list>
<%args>
	$form
</%args>

<%perl>
	return unless ($isDynamicList && $id);
	my $children_fields  = TUSK::FormBuilder::LinkFieldField->new()->lookup('', undef, undef, undef, [TUSK::Core::JoinObject->new('TUSK::FormBuilder::Field', { origkey => 'child_field_id', joinkey => 'field_id', joincond => "root_field_id = $id", jointype => 'inner' })]);

	### needs to pass both field and parent field ids in the field_id
	my @fields_data =  map { {field_id => $_->getParentFieldID() . '/' . $_->getFieldObject()->getPrimaryKeyID(), field_name => $_->getFieldObject()->getFieldName(), child_field_id => $_->getChildFieldID()} } (@$children_fields);

	### last field in the list is the next parent dynamic field
	my $parent_field_id = scalar @fields_data ? $fields_data[$#fields_data]->{child_field_id} : $id;

	my $create_button = $m->scomp('/tmpl/element:button', params => { 
		onclick	 => "window.location='" . $m->comp("/tmpl/url:construct_url", base_url => $m->comp("/formbuilder/util:get_base_dir") . "/fielddynamic", pathref => [ $form->getPrimaryKeyID(), $id, $parent_field_id ]) . "'",
		name 	 => 'addfield',
		label 	 => 'Create Dynamic Field', });
</%perl>

<tr><td colspan="2">&nbsp;</td></tr>
<& /tmpl/element:sort_order_box, params => {
	no_add_button 	=> '1',
	label 		=> 'Dynamic Fields:',
	buttons		=>[ $create_button ],
	layer_info 	=> {
		empty_message => 'No dynamic fields defined',
		context_path => $m->comp("/tmpl/url:get_full_path"),
		base_path 	=> $m->comp("/formbuilder/util:get_base_dir"),
		layer 		=> 'dynamicfieldsdiv',
		fields 		=> ['field_id', 'field_name'],
		name 		=> 'fielddynamic',
		sort 		=> { usage => 'No' },
		action 		=> {
			usage 		=> 'Yes', 
			length 		=> 100, 
			functions 	=> [
				{ func => 'dynamic_field_modify', label => 'Modify'},
				{ func => 'field_delete', label => 'Delete'} ]},
	    display 	=> [ {label => 'field', uneditable => 1, field => 'field_name', align => 'left', length => 450} ],
    	validate 	=> {usage => 'No', form => 'fieldedit',},
    	data 		=> \@fields_data 
	},
} &>
</%method>


<%method action>
<%args>
	$args
	$form
</%args>

<%perl>
	if (defined($args->{'form_submit'}) or $m->comp("/tmpl/wizard:submitted", args => $args)){
		$args->{'field_name'} = 'No Name' unless ($args->{'field_name'});
		$field->setFieldName($args->{'field_name'});
		$field->setFieldTypeID($args->{'field_type_id'});
		$field->setItemSort($args->{'item_sort'});
		$field->setRequired($args->{'required'});
		$field->setDefaultReportFlags($args->{'default_report'}) if (defined $args->{'default_report'});
		$field->setFillinSize($args->{'fillin_size'}) if (defined($args->{'fillin_size'}));
		$field->setAbbreviation($args->{'abbreviation'}) if (defined($args->{'abbreviation'}));
		$field->setFieldDescription($args->{'field_description'}) if (defined($args->{'field_description'}));
		$field->setTrailingText($args->{'trailing_text'}) if (defined($args->{'trailing_text'}));
		$field->setPrivate($args->{'private'}) if (defined($args->{'private'}));

		$field->save({'user' => $m->session->{'user'}->user_id()});

		my $field_id = $field->getPrimaryKeyID();

		# process the items
		my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>$args,filter=>'^itemsdiv');
	
		# do not do a sort if any categories were defined
		my $check_sort = 1;
		foreach my $set (keys %$rowHash){
			if ($item_type_hash->{$rowHash->{$set}->{'fields'}->{'item_type'}} ne 'Item'){
				$check_sort = 0;
				last;
			}
		}

		if ($check_sort && $args->{'item_sort'} eq 'Alphanumeric'){
			my $itemNames = {};
			foreach my $key (keys %$rowHash){
				$itemNames->{$rowHash->{$key}->{'fields'}->{'name'}} = $key;
			}
			my $index = 0;
			foreach my $key (sort keys %$itemNames){
				if ($rowHash->{$itemNames->{$key}}->{'fields'}->{'sortorder'} != $index){
					$rowHash->{$itemNames->{$key}}->{'fields'}->{'sortorder'} = $index;
					$rowHash->{$itemNames->{$key}}->{'elementchanged'} = 1;
				}
				$index++;
			}
		}
	
	foreach my $set (keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'name'}){
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
		}elsif($item_type_hash->{$rowHash->{$set}->{'fields'}->{'item_type'}} eq 'CatEnd'){
			$rowHash->{$set}->{'fields'}->{'name'} = "*End of Category* (hidden)";
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
		}else{
			delete $rowHash->{$set};
		}
	}

	$m->comp('/tmpl/process:manipulate_rows',
		row_type => 'Direct',
		user => $m->session->{'user'}->user_id(),
		object_name => 'TUSK::FormBuilder::FieldItem',
		fields_data => $rowHash,
		field_function_map => {'field_id'=>'setFieldID',
				'sortorder'=>'setSortOrder',
				'name'=> 'setItemName',
				'allow_user_defined_value' => 'setAllowUserDefinedValue',
				'abbreviation' => 'setAbbreviation',
				'content_id' => 'setContentID',
				'item_type' => 'setItemTypeID',
				},
		display_data => $items_data );

	# process the attributes

	$rowHash = $m->comp('/tmpl/process:process_fields',fields=> $args,filter=>'^attributesdiv');
	foreach my $set (keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'name'}){
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
		}else{
			delete $rowHash->{$set};
		}
	}

	$m->comp('/tmpl/process:manipulate_rows',
		row_type => 'Direct',
		user => $m->session->{'user'}->user_id(),
		object_name => 'TUSK::FormBuilder::Attribute',
		fields_data => $rowHash,
		field_function_map => {'field_id'=>'setFieldID',
				'sortorder'=>'setSortOrder',
				'name'=>'setAttributeName',
				'attribute_type' => 'setAttributeTypeID',
				},
		display_data => $attributes_data );

	my ($extra, $msg);

	if ($is_edit){
		$msg = 'Field successfully modified';
		$extra = '';
	}else{
		$extra = $field_id;
		$msg = 'Field successfully created';
		my $link = TUSK::FormBuilder::LinkFormField->new;
		$link->setParentFormID($form->getPrimaryKeyID());
		$link->setChildFieldID($extra);
		my $fields = $form->getFields();
		$link->setSortOrder(scalar(@$fields)*10 + 10);
		$link->save({'user' => $m->session->{'user'}->user_id()});

	}

	$m->comp("/tmpl/wizard:do_next", args => $args, default_transition => $m->comp("/tmpl/url:construct_url", 'base_url' => $ENV{SCRIPT_NAME}, 'extra' => $extra, 'msg' => $msg ));

}
</%perl>
</%method>


<%def getDefaultReportPatientLog>
<%perl>
	my $checkbox;
	foreach my $rtype (@{$TUSK::FormBuilder::Constants::default_report_types}) {
		push @$checkbox, { 	
			label => $rtype->[1], 
			value => $rtype->[0], 
			name => 'default_report',
			checked => ($TUSK::FormBuilder::Constants::map_default_report_flags->{$field->getDefaultReport()}{$rtype->[0]}) ? 1 : 0 };
	}
</%perl>

<& /tmpl/element:field_display, params => { 
	label => 'Include in Report',
	value => $m->scomp("/tmpl/element:checkbox_table", objects => $checkbox, formname => $form_name, checkboxname => 'default_report', allchecked => 0, showcheckall => 0 )
} &>
</%perl>
</%def>
