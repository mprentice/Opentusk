<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%args>
	$generateType => ''
	$school => ''
	$evalID => ''
	$generateObjectType => ''
	$generateXMLFile => 0
	$displayXML => 0
	$loadFile => ''
</%args>
<%attr>
        top_tab_type            => 'none'
        displayLittleUserNavBar => '1'
        no_header               => '1'
        page_header             => undef
        page_footer             => undef
        allow_guests            => '0'
	no_check_path		=> 1
	must_be_tusk_admin	=> 1
</%attr>
<%once>
	use Apache2::Const;
	use HSDB45::Eval;
	use HSDB45::Eval::Formatter;
	use HSDB45::Eval::Results;
	use HSDB45::Eval::Results::Formatter;
	use HSDB45::Eval::Results::BarGraphCreator;
	use HSDB45::Eval::MergedResults;
	use HSDB45::Eval::MergedResults::Formatter;
	use HSDB45::Eval::MergedResults::BarGraphCreator;
	use HSDB45::Eval::Completion::Formatter;
</%once>
% if($loadFile) {
<%perl>
        #Send the download
        $r->content_type("application/unknown");
        $r->headers_out->set("Accept-Ranges", "bytes");
	my $fileName = $TUSK::Constants::EvalSaveDir ."/". $loadFile;
        $r->headers_out->set("Content-Length", -s $fileName);
        $r->headers_out->set("Content-disposition","attachment; filename=$loadFile"); 
        $r->no_cache(1);
	unless(open(my $fh, $fileName)) {return NOT_FOUND;}
                $r->send_fd($fh);
        close $fh;
	unlink $fileName;
        return OK;
</%perl>
% } else {
<%perl>
	if($generateXMLFile eq 'false') {$generateXMLFile = 0;}
	if($displayXML eq 'false') {$displayXML = 0;}
	$r->content_type('text/xml');
	$r->no_cache(1);
	# Check for TUSK Administrator

	# Check input parameters
	my $force = 0;
	my $graphs = 0;
	if($generateType eq 'f') { $force = 1; }
	if($generateType eq 'g') { $graphs = 1; }

	use constant EVAL => 1;
	use constant EVAL_RESULTS => 2;
	use constant EVAL_MERGED_RESULTS => 3;
	use constant EVAL_COMPLETIONS => 4;

	my $type;
	if($generateObjectType eq 'e') {$type = EVAL;}
	elsif($generateObjectType eq 'r') {$type = EVAL_RESULTS;}
	elsif($generateObjectType eq 'm') {$type = EVAL_MERGED_RESULTS;}
	elsif($generateObjectType eq 'c') {$type = EVAL_COMPLETIONS;}

	# some library or other from above is installing a die 
	# handler that I find distasteful, and thus...
	undef $SIG{__DIE__};

	my $error;
	my $xml_text;
	# Do the work
	my $eval = HSDB45::Eval->new(_school => $school, _id => $evalID);
	unless(($type eq EVAL_MERGED_RESULTS) || ($eval && $eval->primary_key()) ) {$error = "No eval with id $evalID";}
	else {
		if($type == EVAL) {
			my $formatter = HSDB45::Eval::Formatter->new($eval);
			$xml_text = $formatter->get_xml_text($force);
			$generateXMLFile = 'eval_' . $school . '_' . $evalID . '.xml' if($generateXMLFile);
		} elsif($type == EVAL_RESULTS) {
			my $results = HSDB45::Eval::Results->new($eval);
			my $formatter = HSDB45::Eval::Results::Formatter->new($results);
			$generateXMLFile = 'eval_results_' . $school . '_' . $evalID . '.xml' if($generateXMLFile);

			if($force) {$xml_text = $formatter->get_xml_text(1);}
			elsif($graphs) {
				$xml_text = $formatter->get_xml_text();
				my $bargraph_creator = HSDB45::Eval::Results::BarGraphCreator->new($school, $evalID, $xml_text);
				$bargraph_creator->save_svg_graphs();
			} else {
				$xml_text = $formatter->get_xml_text();
			}
		} elsif($type == EVAL_MERGED_RESULTS) {
			my $results = HSDB45::Eval::MergedResults->new(_school => $school, _id => $evalID);
			unless($results->primary_key()) {$error = "No merged eval with id $evalID";}
			else {
				my $formatter = HSDB45::Eval::MergedResults::Formatter->new($results);
				$generateXMLFile = 'eval_merged_results_' . $school . '_' . $evalID . '.xml'  if($generateXMLFile);
	
				if($force) {$xml_text = $formatter->get_xml_text(1);}
				elsif($graphs) {
					$xml_text = $formatter->get_xml_text(0);
					my $bargraph_creator = HSDB45::Eval::MergedResults::BarGraphCreator->new($school, $evalID, $xml_text);
					$bargraph_creator->save_svg_graphs();
				} else {
					$xml_text = $formatter->get_xml_text();
				}
			}
		} elsif($type == EVAL_COMPLETIONS) {
			my $results = HSDB45::Eval::Results->new($eval);
			my $formatter = HSDB45::Eval::Completion::Formatter->new($results);
			$xml_text = $formatter->get_xml_text($force);
			$generateXMLFile = 'eval_completions_' . $school . '_' . $evalID . '.xml' if($generateXMLFile);
		}
	}
	my $savedFile = 'null';
	if(!$error && $xml_text && $generateXMLFile) {
		my $fileName = $TUSK::Constants::EvalSaveDir ."/" .  $generateXMLFile;
		unless(open(FILE, ">$fileName")) {$error = "Could not open file " . $fileName . " for writing ($!)";}
		else {
			print FILE $xml_text;
			close(FILE);
			$savedFile = $generateXMLFile;
		}
	}
	unless($displayXML) {$xml_text = 'null';}
	my $returnStatus = 'Success';
	if($error) {$returnStatus = 'Error';}
	else {
		$error = 'null';
	}
</%perl>
% $m->clear_buffer();
<?xml version="1.0" encoding="UTF-8"?>
<evalXMLResults>
	<args>
        	<generateType><% $generateType %></generateType>
        	<school><% $school %></school>
        	<evalID><% $evalID %></evalID>
        	<generateObjectType><% $generateObjectType %></generateObjectType>
        	<generateXMLFile><% $generateXMLFile %></generateXMLFile>
        	<displayXML><% $displayXML %></displayXML>
	</args>
	<status><% $returnStatus %></status>
	<error><% $error %></error>
	<xmlFileName><% $savedFile %></xmlFileName>
	<evalXML><![CDATA[<% $xml_text %>]]></evalXML>
</evalXMLResults>
% }
