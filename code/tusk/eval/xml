<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::Core::School;
	use HSDB45::Eval;
	use HSDB45::Eval::Formatter;
	use HSDB45::Eval::Results;
	use HSDB45::Eval::Results::Formatter;
	use HSDB45::Eval::Results::BarGraphCreator;
	use HSDB45::Eval::MergedResults;
	use HSDB45::Eval::MergedResults::Formatter;
	use HSDB45::Eval::MergedResults::BarGraphCreator;
	use HSDB45::Eval::Completion::Formatter;
</%once>
<%args>
</%args>
<%attr>
	no_check_path => 1
	must_be_tusk_admin => 1
</%attr>
<%method title>
%       return 'Eval XML Tool';
</%method>
<script>
        var ajaxRequest;

	function finishForm(divDisplay) {
		document.getElementById('xmlResults').innerHTML = divDisplay;
		document.getElementById('perform_save').style.display = 'block';
	}

	function performAction() {
		try {
			if (window.XMLHttpRequest)      {ajaxRequest = new XMLHttpRequest();}
			else if (window.ActiveXObject)  {ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");}
			if(ajaxRequest) {
				document.getElementById('perform_save').style.display = 'none';
				document.getElementById('xmlResults').innerHTML = '<br><br><center>Generating XML... this can take a very long time.<br><img src="/graphics/icons/waiting_bar.gif"></center>';
				var parameters = '';
				for(var i=0; i<document.theForm.generateType.length; i++) {
					if(document.theForm.generateType[i].checked) {
						parameters += 'generateType='+ encodeURI(document.theForm.generateType[i].value) +'&';
					}
				}
				parameters += 'school='+ encodeURI(document.theForm.school[document.theForm.school.selectedIndex].value)+'&';
				parameters += 'evalID='+ encodeURI(document.theForm.evalID.value)+'&';
				for(var i=0; i<document.theForm.generateObjectType.length; i++) {
					if(document.theForm.generateObjectType[i].checked) {
						parameters += 'generateObjectType='+ encodeURI(document.theForm.generateObjectType[i].value) +'&';
					}
				}
				parameters += 'generateXMLFile='+ encodeURI(document.theForm.generateXMLFile.checked)+'&';
				parameters += 'displayXML='+ encodeURI(document.theForm.displayXML.checked)+'&';
                                ajaxRequest.open("POST", "/tusk/ajax/evalXML", true);
				ajaxRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
				ajaxRequest.setRequestHeader("Content-length", parameters.length);
                                ajaxRequest.onreadystatechange = doXMLLoad;
                                ajaxRequest.send(parameters);
                        } else {
				finishForm('<font color="red">Error requesting eval.</font>');
                        }
		} catch(error) {
			finishForm('<center>Error in eval ajax request:<br>'+error.description+'</center>');
		}
	}

	function doXMLLoad() {
		try {
			if(ajaxRequest && ajaxRequest.readyState == 4) {
				if(ajaxRequest.status && (ajaxRequest.status == 200)) {
					if(ajaxRequest.responseXML) {
						//Pull the values which have to be there
						var xmlData	= ajaxRequest.responseXML.getElementsByTagName('evalXMLResults')[0];
						var status	= xmlData.getElementsByTagName('status')[0].firstChild.nodeValue;
						var newFileName	= xmlData.getElementsByTagName('xmlFileName')[0].firstChild.nodeValue;
						var error	= xmlData.getElementsByTagName('error')[0].firstChild.nodeValue;
						var displayXML	= xmlData.getElementsByTagName('evalXML')[0].firstChild.nodeValue;
						displayXML = displayXML.replace(/</g, "&lt;").replace(/>/g, '&gt;');
						var message = '';
						var results = 'Success';
						if(status == 'Error') {results='Failure';}

						message += '<h2 style="padding-left:35px;">'+ results +'</h2><br>';
						if(error != 'null') {message += '<pre><font color="red">'+ error +'</font></pre>';}
						if(displayXML != 'null') {message += "<pre>"+displayXML+"</pre>";}
						finishForm(message);
						if(newFileName != 'null') {
							document.getElementById('loadFileHere').src='/tusk/ajax/evalXML?loadFile='+newFileName;
						}
					} else {
						finishForm('<h2 style="padding-left:35px;">Unknown Error</h2><br>'+ajaxRequest.responseText);
						//window.location.reload();
					}
				} else if(ajaxRequest.status && (ajaxRequest.status == 500)) {
					finishForm('<center><font color="red">Error loading results.</font></center>');
				} else if(ajaxRequest.status && (ajaxRequest.status == 302)) {
					finishForm('<center><font color="red">Got a redirect.</font></center>');
				} else {
					finishForm('<br><br><center><font color="red">Unspecified error loading results... possible timeout.</font><center><'+ +'!-- '+ ajaxRequest.status +' --!>');
				}
			}
		} catch(error) {
			finishForm('<center>Error processing eval ajax request:<br>'+error.description+'</center>');
		}
	}
</script>
<table border="0">
<tr>
<td valign="top">
<& /tmpl/element:form, params => {
	name => 'theForm',
	onsubmit => 'performAction(); return false;',
	action => '',
}&>
<& /tmpl/element:table, params => {  } &>
%	my @schoolOptions;
%       my $theSchools = TUSK::Core::School->lookup();
%       foreach my $aSchool (@{$theSchools}) {
%		push @schoolOptions, {
%			'label' => $aSchool->getSchoolDisplay(),
%			'value' => $aSchool->getSchoolName(),
%		};
%	}
<& /tmpl/element:dropdown, params => {
        'options'       => \@schoolOptions,
        'name'          => "school",
        'label'         => "School:",
}&>
<& /tmpl/element:textbox, params => {
        'name'          => "evalID",
        'label'         => "Eval ID:",
        'size'          => 10,
}&>
<& /tmpl/element:radio_buttons, params => {
	label => 'Generate XML For:',
	name => 'generateObjectType',
	nobreak => 0,
	buttons => [
		{ value => "e", text => "Eval", checked => 1,},
		{ value => "r", text => "Eval Results", checked => 0, },
		{ value => "m", text => "Eval Merged Results", checked => 0,},
		{ value => "c", text => "Eval Completions", checked => 0, },
	],
}&>
<& /tmpl/element:radio_buttons, params => {
	label => 'Regeneration Type:',
	name => 'generateType',
	nobreak => 0,
	buttons => [
		{ value => "m", text => "Minor Regeneration", checked => 1,},
		{ value => "f", text => "Total Regeneration", checked => 0,},
		{ value => "g", text => "Just Bar Graphs", checked => 0, },
	],
}&>
<& /tmpl/element:checkbox, params => {
	label => 'Generate XML File:',
	name => 'generateXMLFile',
	checked => 0,
}&>
<& /tmpl/element:checkbox, params => {
	label => 'Display XML:',
	name => 'displayXML',
	checked => 0,
}&>
<& /tmpl/element:save_button, params=>{
        'name'                  => 'perform_save',
        'label'                 => 'Generate XML',
        'no_cancel_button'      => 1,
} &>
</table>
</td><td>
<div style="border:1px solid gray; padding:3px;">
	<center><b>Help</b></center>
	Generate XML for:
	<p style="margin-left:5px; margin-top:1px; padding-top:1px;">
		Selects the object type to regenerated for the eval.<br>
		Eval = HSDB45::Eval::Formatter<br>
		Eval Results = HSDB45::Eval::Results<br>
		Eval Merged Results = HSDB45::Eval::MergedResults<br>
		Eval Completions = HSDB45::Eval::Results and HSDB45::Eval::Completion::Formatter<br>
	</p>

	Regeneration Type:
	<p style="margin-left:5px; margin-top:1px; padding-top:1px;">
		Selects how muych information should be regenerated by this process.<br>
		Total Regenration will completly regenerate all results for the selected eval.<br>
		Just Bar Graphs will only regenerate data for the bar graphs.<br>
		Minor Regeneration will only regenreate the xml realted to the eval but not the graphs.<br>
		<b>Note:</b>Regeneration is only valid if you are generating xml for Eval Results or Eval Merged Results.<br>
	</p>

	Display XML
	<p style="margin-left:5px; padding-top:1px; margin-top:1px;">This option will render the xml that was regenerated on the screen.</p>

	Generate XML File:
	<p style="margin-left:5px; padding-top:1px; margin-top:1px;">This will cause the browser to download the xml that was regenerated.</p>
</div>
</td></tr></table>
</form>
<div id="xmlResults"></div>
<iframe width="1" height="1" style="display:none;" id="loadFileHere"></iframe>
