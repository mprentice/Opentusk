<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::Quiz::LinkQuestionQuestion;
	use TUSK::Quiz::Quiz;
	use TUSK::Core::IntegratedCourseQuizQuestion;
	use TUSK::Core::QuizQuestionKeyword;

	my $get_answer_data = sub {
		my $answers = shift or confess "answers array required";
	    my $question_id = shift or confess "question_id required";

		return map { {
                        answer		  => $_->getValue(),
                        correct		  => $_->getCorrect(),
                        quiz_answer_id 	  => $_->getPrimaryKeyID(),
                        question_id	  => $question_id,
                        hint		  => $_->getHint(),
			feedback	  => $_->getFeedback(),
			child_question_id => $_->getChildQuestionID(),
			question	  => $_->getChildQuestionBody($_->getChildQuestionID()),
			   } }
               	@{$answers};
	};
</%once>

<%method question_fields>
<%args>
	$question
	$questionLink
	$quiz_id	=> undef
	$formname => 'foo'
	$tool	=> 'Quiz'
</%args>
<%perl>
	my $question_id = $question->getPrimaryKeyID();
	my $answers = $question->getAnswers();
	my @answers_data;
	if (defined($answers)){
	    @answers_data = $get_answer_data->($answers,$question_id);
	}
</%perl>

<script language="JavaScript">

function populate_answers(){
	removeall('answersdiv');
	hidebutton('addanswer');

	var tablerow_display = 'table-row';
	if (is_ie){
		tablerow_display = 'inline'; // needed because IE does not support display type table-row :(
	}

	document.getElementById('num_fill_ins_tr').style.display = 'none';
	document.getElementById('Answers_tr').style.display = tablerow_display;

	var questionType = document.forms['<% $formname %>'].question_type.value;

	if (questionType == "Matching"){
		layers['answersdiv'].structure['display'][3]['type'] = 'hidden';
		layers['answersdiv'].structure['display'][0]['type'] = 'textarea';
		layers['answersdiv'].structure['display'][0]['label'] = _('Pair Question');
		layers['answersdiv'].structure['display'][0]['htmleditor'] = '1';
		layers['answersdiv'].structure['display'][1]['label'] = _('Pair Answer');
	} else {
		layers['answersdiv'].structure['display'][3]['type'] = '';
		layers['answersdiv'].structure['display'][0]['type'] = 'hidden';
		layers['answersdiv'].structure['display'][0]['label'] = _('Question');
		layers['answersdiv'].structure['display'][1]['label'] = _('Answer');
	}

	layers['answersdiv'].header = header(layers['answersdiv'].structure);
	document.getElementById('feedback_tr').style.display = tablerow_display;
	document.getElementById('points_tr').style.display = tablerow_display;
	document.getElementById('answernote').style.display = 'none';

	if (questionType == "Section"){
		document.getElementById('feedback_tr').style.display = 'none';
		document.getElementById('points_tr').style.display = 'none';
		document.getElementById('Answers_tr').style.display = 'none';
	}

	if (questionType == "TrueFalse"){
		layers['answersdiv'].structure['action']['usage'] = 'No';
		layers['answersdiv'].header = header(layers['answersdiv'].structure);
		addTrueFalseAnswers();
		document.getElementById('answernote').style.display = 'inline';
	}else if (questionType == "Essay"){
		document.getElementById('Answers_tr').style.display = 'none';
	}else{
		layers['answersdiv'].structure['action']['usage'] = 'Yes';
		layers['answersdiv'].header = header(layers['answersdiv'].structure);

		if (questionType == "MultipleChoice"){
			layers['answersdiv'].structure['display'][1]['type'] = 'textarea';
			showbutton('addanswer');
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			document.getElementById('answernote').style.display = 'inline';	
		} else if (questionType == "Matching"){
			layers['answersdiv'].structure['display'][1]['type'] = 'textarea';
			showbutton('addanswer');
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			addDefaultToLayer();
			document.getElementById('answernote').style.display = 'inline';
		} else if (questionType == 'FillIn' || questionType == 'MultipleFillIn'){
			document.getElementById('Answers_tr').style.display = 'none';
			if (questionType == 'MultipleFillIn'){
				document.getElementById('num_fill_ins_tr').style.display = tablerow_display;
			}
		}
	}
}

function addToLayer(newdata){
    layers['answersdiv'].adddata(newdata,0);
}

function addDefaultToLayer(){
	addToLayer({ correct:'',quiz_answer_id:'0',question_id:'<% $question_id %>',question:'', answer:'', feedback:'', child_question_id:'' });
}

function addTrueFalseAnswers(){
	var elem =  document.forms['<% $formname %>'].addanswer;
	if (elem){
		elem.style.visibility = "hidden";
	}
	layers['answersdiv'].structure['display'][1]['type'] = '';
	addToLayer({ correct:'',quiz_answer_id:'0',question_id:'<% $question_id %>',question:'',answer:'True' , feedback:'', child_question_id:'' });
	addToLayer({ correct:'',quiz_answer_id:'0',question_id:'<% $question_id %>',question:'',answer:'False', feedback:'', child_question_id:'' });
}
</script>


% if (defined($question->getType())){
<& /tmpl/element:field_display, params=>{ label => __('Question&nbsp;Type'), value => $question->getFormattedType() } &>
<& /tmpl/element:hidden_form_element, params => { name => 'question_type', value => $question->getType() } &>
% } else {
%	my $onchange = 'populate_answers';
%	if ($tool eq 'Case') {
%		my $quiz = TUSK::Quiz::Quiz->new()->lookupKey($quiz_id);
%		my $has_score_rule = ($quiz->usedInScoreRule())? 1 : 0;
%		$onchange .= ($has_score_rule)? '_check' : '';
%	}
<& /tmpl/element:dropdown, params=>{ label => __('Question&nbsp;Type'),
                name=>"question_type",
                onchange=>"$onchange('$formname');",
                selected=>$question->getType() ,
                options=>$m->comp('/quiz/author/tmpl/process:question_type_data',include_empty=>1)} &>
% }


<& /tmpl/element:textarea, params=>{ 
			label	 	=> __('Question&nbsp;Body'),
	        name		=> "body",
       	    cols		=> "80",
       	 	rows		=> "6",
            value		=> $question->getBody(),
            htmleditor  => 1 },
		cke_params	=> { height => '150' }
 &>

% if ($question->getType() ne "Section"){
%       my $note; my $first_display = '';
%	if (!defined ($question->getType()) || $question->getType() =~ /TrueFalse|MultipleChoice/) {
%		$first_display = 'style="display:none;"' unless (defined ($question->getType()));

%		$note = __('Note: This feedback will appear regardless of which answer a quiz taker selects.');
%	}

<& /tmpl/element:textarea, params=>{ 
			label	 				=> __('Answer&nbsp;/&nbsp;Feedback'),
            name					=> "feedback",
         	cols					=> "80",
 	       	rows					=> "3",
           	value					=> $question->getFeedback(),
			trailing_text   		=> "<div id=\"answernote\" $first_display>$note</div>",
			trailing_text_new_row	=> 1,
            htmleditor  			=> 1 },
		cke_params	=> { height => '150' }
	&>


<& /tmpl/element:textbox, params =>{ label => __('Question&nbsp;Points'),
            name => 'points',
			id => 'questionPoints',
            value => ($questionLink->getPoints()) ? $questionLink->getPoints() : 1,
            size => 10,
            length => 10 }
	&>
% }
%


<%perl>
	my $num_fill_ins_display = "none";
	my $num_fill_ins_selected = 2;

	if ($question->getType() eq "MultipleFillIn"){
		if ($question->getPrimaryKeyID()){
			my $links = $question->getSubQuestionLinks();
			$num_fill_ins_selected = scalar(@$links);
		}
		$num_fill_ins_display = "table-row";
	}
</%perl>

<& /tmpl/element:dropdown, params=> { 
					label 		=> __('# of Fill Ins'),
					tr_style	=> 'display:' . $num_fill_ins_display,
                			name		=> 'num_fill_ins',
			                selected	=> $num_fill_ins_selected ,
			                options		=> [2..20],
				    } &>

<%perl>
	my $style;

	$style = 'display:none' if ($question->getType() eq 'Essay' or $question->getType() eq 'TrueFalse' or $question->getPrimaryKeyID() == 0);
        
	my $button_text = $m->scomp('/tmpl/element:button',
               			params => { 
						onclick	=> "addDefaultToLayer();", 
               					name	=> 'addanswer',
              		 			label	=> __('Create Answer'),
	       					style	=> $style
					});
	my $actions_func_hash = []; 
	my $actionusage="No";
	if ($question->getType() ne 'TrueFalse'){
        	push @{$actions_func_hash}, {func=>'remove', label=>__('Delete')};
		$actionusage="Yes";
	}

	my $type = "textarea";

	if ($question->getType() eq "TrueFalse"){
		$type = "text";
	}

	my $question_display_type = ($question->getType() eq "Matching") ? "textarea" : "hidden";
	my $correct_display_type = ($question->getType() eq "Matching") ? "hidden" : "";
	my $htmleditor = ($question->getType() eq "Matching") ? "1" : "";

	my $display = [
			{label=> (($question->getType() eq 'Matching') ? __('pair').' ' : '' ) . __('Question'),field=>'question', align=>'center', length=>230, type => $question_display_type, htmleditor => $htmleditor},
			{label=>(($question->getType() eq 'Matching') ? __('pair').' ' : '' ) . __('Answer'),field=>'answer', align=>'center', length=>230, type => $type, htmleditor => '1'},
		       	{label=>__('feedback'),field=>'feedback', align=>'center', length=>270, type => 'textarea', htmleditor => '1'},
               		{label=>__('correct'),field=>'correct', align=>'center', length=>50, type => $correct_display_type, 
						options=>[{'label'=>__('No'),'value'=>'0'},{'label'=>'Yes','value'=>'1'}]},
			{label=>__('child question id'),field=>'child_question_id', align=>'center', length=>230, type => 'hidden'},

			];
</%perl>

% if ($question->getType() ne "Essay" and $question->getType() ne "Section" and $question->getType() ne "FillIn" and $question->getType() ne "MultipleFillIn"){

% ## fill in blank data for sort order box if this is a new question
% ## so that the functions that populate empty questions don't throw error in certain browsers
%  if (!@answers_data) {
% 	if ($question->getType() eq "Matching" || $question->getType() eq "MultipleChoice") {
% 		@answers_data = ({},{},{},{},{});
% 	}
% 	elsif ($question->getType() eq "TrueFalse") {
% 		@answers_data = ({'answer' => 'True'},{'answer' => 'False'});
% 	}
%  }

<& /tmpl/element:sort_order_box , params =>{
                label =>__('Answers'),
		name => 'Answers',
                no_add_button=>1,
                buttons => [$button_text],
                layer_info => {
                        layer => 'answersdiv',
                        fields => ['quiz_answer_id','question_id','answer','correct', 'question', 'child_question_id'],
                        name => 'answer',
                        sort => {usage => 'Yes', length=>50},
                        action => {usage => $actionusage, length=>250, functions=>$actions_func_hash},
                        display => $display,
                        validate => {
                                        usage => 'No',
                                },
                        data => \@answers_data,
			context_path => $m->comp("/tmpl/url:get_full_path") }
                } &>
% }
%
% if ($question->getPrimaryKeyID() && $question->getType() eq "Section"){
%
	<& /quiz/author/tmpl/editquestion:show_questions_box, id => $question->getPrimaryKeyID(), links => $question->getSubQuestionLinks(), type => 'Section', tool => $tool &>
%
% }
% 
%   my $type_object =  $m->comp("/tmpl/url:get_type_object");
%	my $school = $m->comp("/tmpl/url:get_school");
%	my $course_id = $type_object->course_id;
%	my $course = HSDB45::Course->new( _school => $school )->lookup_key( $course_id );
%
% if ($course->type() eq 'integrated course') {
%   my $related_courses ; 
%   if(defined($question_id)){
%		$related_courses = $question->get_related_courses($question_id,$course_id,$school);
%	}

 <td class="labelgray"><%__("Related Courses")%>
</td> <td>

%   my @coursearray;
%	foreach my $subcourse (@{$course->get_subcourses()}) {
%		my $course_hash_el;
%		$course_hash_el->{'label'} = $subcourse->title();
%		$course_hash_el->{'value'} = $subcourse->course_id();
%		$course_hash_el->{'name'} = "related";
%		foreach  my $rcourse (@$related_courses) {
%			if( $rcourse->primary_key == $subcourse->course_id() ) {
%				$course_hash_el->{'checked'} = "1";
%			}
%		} #foreach related course
%		push(@coursearray,$course_hash_el);	
%	} # foreach subcourse
% 


<& /tmpl/element:checkbox_table, label => __('Related Courses'), objects => \@coursearray, formname	=> $formname, checkboxname => $coursearray[0]{'name'}, showcheckall => 0 &>

</td>

<tr>
<td class="labelgray"><%__("UMLS Concepts & Keywords")%> </td> 

%		my $ids = $m->comp('/tmpl/url:get_path_ids');


%		my $UMLSConceptsHREF = '/quiz/author/umlsconcepts/' . $m->comp('/tmpl/url:get_type_path');
%		my $AuthorDefinedHREF = '/quiz/author/authordefinedkeywords/' . $m->comp('/tmpl/url:get_type_path');

%		if (scalar @$ids){
%			$UMLSConceptsHREF .= '/' . join '/', @$ids;
%			$AuthorDefinedHREF .= '/' . join '/', @$ids;
%		}

<td>
	
%		$m->comp('/tmpl/element:button',
%						params => {
%								href	=> $UMLSConceptsHREF,
%								label	=> __('Manage UMLS Concepts'),
%								name	=> 'UMLSConcepts',
%							} );
%		$m->comp('/tmpl/element:button',
%						params => {
%								href	=> $AuthorDefinedHREF,
%								label	=> __('Manage Keywords'),
%								name	=> 'Keywords',
%							} );

%	if ( @$ids[1] ){  # if we're editing
%   my $linkquestion = TUSK::Quiz::LinkQuizQuizItem->new->lookup("quiz_id = @$ids[0] AND quiz_item_id = @$ids[1] ");
%	my $linkquestion_id;
%	if($linkquestion) {
%   		 $linkquestion_id = $linkquestion->[0]->{'_id'};
%	}	 
%	my $keyword_links = TUSK::Core::QuizQuestionKeyword->new()->lookup("parent_link_quiz_quiz_item_id =".$linkquestion_id );
%   my @keywords;
%	foreach my $keyword_link (@$keyword_links){
% 		push (@keywords,$keyword_link->getKeywordObject());
%	}
%   $m->comp("/management/tmpl/content-comps:display_keywords", keywords => \@keywords);
%	}


</td>
</tr>

% } # END if course is integrated course

</%method>


<%method process_args>
<%args>
	$question
	$questionLink
	$id
	$type
	$user_id
	$args
</%args>
<%perl>
	my $is_edit = 1;
	my $answers = $question->getAnswers();
	my $question_id = $question->getPrimaryKeyID();
        my @answers_data;
        if (defined($answers)){
		@answers_data = $get_answer_data->($answers,$question_id);
	}  
	if ($question->getPrimaryKeyID()){
		if ($question->getType() eq "Section"){
			$m->comp('/quiz/author/tmpl/process:questions_sort_order', type => 'Section', id => $question->getPrimaryKeyID(), args => $args); 
		}
	} else {
		$is_edit = 0;
		$question->setType($args->{'question_type'});
	}

	$question->setBody($args->{'body'});
	$question->setFeedback($args->{'feedback'});

	if (defined($args->{'type'})){
		$question->setType($args->{'type'});
	}
	$question->save({'user'=>$user_id}) ;
	$question_id = $question->getPrimaryKeyID();
	
	$questionLink->setLabel($args->{'label'});
	$questionLink->setPoints(($args->{'points'}) ? $args->{'points'} : 0); # we cannot pass NULL as points

	if ($type eq 'Quiz'){
		$questionLink->setQuizID($id);
		$questionLink->setQuizItemID($question_id);
	}elsif ($type eq 'Section'){
		$questionLink->setParentQuestionID($id);
		$questionLink->setChildQuestionID($question_id);
	}

	if ($is_edit == 0){
		if ($type eq 'Quiz'){
			my $questions = TUSK::Quiz::LinkQuizQuizItem->new->lookup("quiz_id = $id");
			$questionLink->setSortOrder(scalar(@$questions));
			
		} elsif ($type eq 'Section'){
			my $questions = TUSK::Quiz::LinkQuestionQuestion->new->lookup("parent_question_id = $id");
			$questionLink->setSortOrder(scalar(@$questions));
		}
	}
	$questionLink->save({'user'=>$user_id});
    if($type eq 'Quiz') {
	   my $type_object =  $m->comp("/tmpl/url:get_type_object");
	   my $school = $m->comp("/tmpl/url:get_school");
	   my $orig_course_id = $type_object->course_id;
	   my $orig_course = HSDB45::Course->new( _school => $school )->lookup_key( $orig_course_id );

	   #first delete any links that this question_id/orig_course combo has
	   my $query_str = "child_quiz_question_id = $question_id AND originating_course_id = ".$orig_course->getTuskCourseID();
	   my $linkICQs = TUSK::Core::IntegratedCourseQuizQuestion->new->lookup($query_str);
	
	   foreach my $lnk (@$linkICQs) {
			$lnk->delete();
	   }
	  
	   if(ref($args->{related}) eq 'ARRAY'){
			foreach my $related_course_id (@{$args->{related}}){
				my $related_course = HSDB45::Course->new( _school=>$school)->lookup_key($related_course_id);

				#linkIntegratedCourseQuestion
				my $linkICQ = TUSK::Core::IntegratedCourseQuizQuestion->new();
	
				#need to get TUSK course IDs for this use course->getTuskCourseID

				$linkICQ->setParentIntegratedCourseID($related_course->getTuskCourseID());
				$linkICQ->setOriginatingCourseID($orig_course->getTuskCourseID());
				$linkICQ->setChildQuizQuestionID($question_id);
				$linkICQ->save();

			} # end foreach

		} else {
			if($args->{related}) {
	   		my $related_course = HSDB45::Course->new( _school=>$school)->lookup_key($args->{related});

			#linkIntegratedCourseQuestion
			my $linkICQ = TUSK::Core::IntegratedCourseQuizQuestion->new();
	
			#need to get TUSK course IDs for this use course->getTuskCourseID
			$linkICQ->setParentIntegratedCourseID($related_course->getTuskCourseID());
			$linkICQ->setOriginatingCourseID($orig_course->getTuskCourseID());
			$linkICQ->setChildQuizQuestionID($question_id);
			$linkICQ->save();
			}
		}

	} ### end if type eq 'Quiz'

	
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>$args,filter=>'^answersdiv');
	foreach my $set (keys %{$rowHash}){
		if ($rowHash->{$set}->{'fields'}->{'answer'}) {
			$rowHash->{$set}->{'fields'}->{'question_id'} = $question_id;
		} else {
			delete $rowHash->{$set};
		}
	}

	# do some wild stuff if this is a matching question
	if ($question->getType() eq "Matching"){
		my %submitted_child_ids = ();
		foreach my $key (keys %$rowHash){
			my $child_id = $rowHash->{$key}->{'fields'}->{'child_question_id'};
			$submitted_child_ids{$child_id} = 1;

			my $tmpHash = $rowHash->{$key};

			if($tmpHash->{fields}->{question}){
				my $child_question = TUSK::Quiz::Question->new();

				if ($tmpHash->{fields}->{child_question_id}){
					$child_question->lookupKey($tmpHash->{fields}->{child_question_id});
				}

				$child_question->setBody($tmpHash->{fields}->{question});
				$child_question->setType('MatchingChild');
				$child_question->save({ user => $user_id });


				my $link = TUSK::Quiz::LinkQuestionQuestion->new();
				if ($tmpHash->{fields}->{child_question_id}){
					my $alink = $link->lookupReturnOne("parent_question_id = " . $question->getPrimaryKeyID() . " and child_question_id = " . $child_question->getPrimaryKeyID());
					if (ref($alink) eq 'TUSK::Quiz::LinkQuestionQuestion' && $alink->getPrimaryKeyID()){
						$link = $alink;
					}
				}				

				$link->setParentQuestionID($question_id);
				$link->setChildQuestionID($child_question->getPrimaryKeyID());
				$link->setPoints($args->{points});
				$link->setSortOrder($key);
				$link->save({ user => $user_id });
				
				$tmpHash->{fields}->{child_question_id} = $child_question->getPrimaryKeyID();
			} else {

				if ($tmpHash->{fields}->{child_question_id}){
					my $link = TUSK::Quiz::LinkQuestionQuestion->lookupReturnOne("child_question_id = " . $tmpHash->{fields}->{child_question_id});
					if (ref($link) eq 'TUSK::Quiz::LinkQuestionQuestion' and $link->getPrimaryKeyID()){
						$link->delete({ user => $user_id });
					}
					my $child_question = TUSK::Quiz::Question->new()->lookupKey($tmpHash->{fields}->{child_question_id});
					$child_question->delete({ user => $user_id });
				}

				$tmpHash->{fields}->{child_question_id} = 0;
			}
		}
			
		#Delete LinkQuestionQuestion and the child Question for any questions not submitted.
		#XXX This reimplements functionality from /tmpl/process:manipulate_rows ...
		for (my $i = 0; $i < scalar(@answers_data); $i++){
			my $child_id = $answers_data[$i]->{'child_question_id'};
			
			if (!$submitted_child_ids{$child_id}){
				my $parent_id = $answers_data[$i]->{'question_id'};
				my $link_obj = TUSK::Quiz::LinkQuestionQuestion->new()->lookupByRelation($parent_id, $child_id);
				# There should only ever be one link between a child and parent question.
				@$link_obj[0]->delete( {user => $user_id} );

				my $child_question_obj = TUSK::Quiz::Question->new()->lookupKey($child_id);
				$child_question_obj->delete({user => $user_id});
			}	
		}
	}
	

	if ($question->getType() eq "MultipleFillIn"){
		my $links = $question->getSubQuestionLinks();

		foreach my $link (@$links){
			$link->setPoints($args->{points});
			$link->save({ user => $user_id });		
		}

		if ($args->{'num_fill_ins'} > scalar(@$links)){
			for my $int (scalar(@$links)..($args->{'num_fill_ins'}-1)){
				my $child_question = TUSK::Quiz::Question->new();
				$child_question->setType("FillIn");
				$child_question->save({ user => $user_id });
	
				my $link = TUSK::Quiz::LinkQuestionQuestion->new();
				$link->setParentQuestionID($question_id);
				$link->setChildQuestionID($child_question->getPrimaryKeyID());
				$link->setPoints($args->{points});
				$link->setSortOrder($int);
				$link->save({ user => $user_id });
			}
		} elsif ($args->{'num_fill_ins'} < scalar(@$links)){
			for my $int ($args->{'num_fill_ins'}..(scalar(@$links)-1)){
				my $child_question = $links->[$int]->getQuestionObject();
				$links->[$int]->delete({ user => $user_id });		
				$child_question->delete({ user => $user_id });
			}
		}
	}


	$m->comp('/tmpl/process:manipulate_rows',
		row_type => 'Direct',
		user => $user_id,
		object_name => 'TUSK::Quiz::Answer',
		fields_data => $rowHash,
		field_function_map => {'question_id'=>'setQuestionID',
				'sortorder'=>'setSortOrder',
				'answer'=>'setValue',
				'feedback' =>'setFeedback',
				'child_question_id' => 'setChildQuestionID',
				'correct'=>'setCorrect' },
		display_data => \@answers_data );



</%perl>
</%method>


<%method show_questions_box>
<%args>
	$links
	$id
	$type
	$tool	=> 'Quiz'
</%args>
<%perl>
	my $questions_data = [];
	my $filter_hash;
    my $type_object =  $m->comp("/tmpl/url:get_type_object");
	my $school = $m->comp("/tmpl/url:get_school");
	my $orig_course_id = $type_object->course_id;
	my $orig_course = HSDB45::Course->new( _school => $school )->lookup_key( $orig_course_id );

	my $iterator = 0;
	foreach my $link (@$links){
		my $question = $link->getQuestionObject();
	
        my $hash = { 	
				label 		=> $link->getLabel(),
				body		=> $question->getBody(),
				title		=> $question->getTitle(),
				type		=> $question->getFormattedType() ,
				question_id	=> $question->getPrimaryKeyID() ,
				quiz_id		=> $id ,		
				id          => $link->getPrimaryKeyID(),
				number      => ++$iterator,
			};

	   if( $orig_course->type() eq 'integrated course') {

	   		#first delete any links that this question_id/orig_course combo has
	   		my $query_str = "child_quiz_question_id = ".$question->getPrimaryKeyID()."  AND originating_course_id = ".$orig_course->getTuskCourseID();
	   		my $linkICQs = TUSK::Core::IntegratedCourseQuizQuestion->new->lookup($query_str);

	   		my $courses_str ;
	   		my @courses_array;
	   		my $is_first_time=0;
	   		foreach my $lnk (@$linkICQs) {
			
					if ($is_first_time == 0) { $is_first_time++; }
					else {
						$courses_str .=", ";
					}
					my $i_tusk_course = TUSK::Course->new()->lookupKey( $lnk->getParentIntegratedCourseID() );
					my $hsdb_course = $i_tusk_course->getHSDB45CourseFromTuskID();
					my $title = $hsdb_course->title();
					$title =~ tr# #_#;
					$courses_str .= $title;			
					push(@courses_array,$hsdb_course->title());
	   		}# end foreach

		$hash->{'related_crs'} = \@courses_array;

	   } # end if
	
		push (@$questions_data, $hash);
	} # end foreach
		 	
	my $subcourse_array;
	push(@$subcourse_array,{ 'label' => __("None"), value => 'None'});

	foreach my $subcourse (@{$orig_course->get_subcourses()}) {	
		my $dropdown_element = { 'label' => $subcourse->title(), 'value' => $subcourse->title() };
		push(@$subcourse_array,$dropdown_element);
	} # foreach subcourse

	 $filter_hash = { 	
				label 		=> __("Filter (Related Course): "),
				prefix		=> "qstns",
				filter_on	=> 'related_crs',
				filters_dropdown	=> $subcourse_array ,
			};

	my $locations = { 
				Quiz	=> '/quiz/author/questionaddedit',
				Case	=> '/case/author/questionaddedit',
			};

	my $create_button_text = $m->scomp('/tmpl/element:button', params=>{ 
		onclick	 => "window.location='" . $m->comp("/tmpl/url:construct_url", base_url => $locations->{$tool}) . "?add=1'",
		name 	 => 'addquestion',
		label 	 => __('Create Question'),
	});

	my ($copy_button_text,$delete_button_text);

	if ($tool eq 'Quiz' && $type ne 'Section') {
		$copy_button_text = $m->scomp('/tmpl/element:button', params=>{ 
			onclick	 => "window.location='" . $m->comp("/tmpl/url:construct_url", base_url => "/quiz/author/questionscopy") . "'",
			name 	 => 'copyquestions',
			label 	 => __('Copy Quiz Questions')
		});


		$delete_button_text = $m->scomp('/tmpl/element:button', params=>{ 
			onclick	 => "window.location='" . $m->comp("/tmpl/url:construct_url", base_url => "/quiz/author/questionsdelete") . "'",
			name 	 => 'deletequestions',
			label 	 => __('Delete Multiple Questions')
		});
	}


	my $actions = {
			Quiz => {
				edit	=> 'question_edit',
				remove	=> 'question_remove',
			},
			Case => {
				edit	=> 'case_question_edit',
				remove	=> 'case_question_remove',
				},
			};

	my $list_fields = [  	
					{ hide => 1, field => 'id' },
					{ hide  => 1, field => 'question_id' },
					{ hide  => 1, field => 'quiz_id' },
					{ label => __('Number'), field => 'number', width => '60' },
                	{ label => __('Type'), field => 'type' },	
                	{ label => __('Body'), field => 'body' }
			 ] ;

if ($orig_course->type() eq 'integrated course' ) {
	push (@$list_fields,{ label=>__('Related Courses'), field => 'related_crs'} );
}

</%perl>


% my $trailing_text = (scalar @$questions_data > 4) ? "$create_button_text $copy_button_text" : undef;

% my $post_to = '/quiz/author/ajaxReorder/';
% if ($type eq 'Quiz') {
%	$post_to .= 'quiz/';
% }
% elsif ($type eq 'Section') {
%	$post_to .= 'question/';
% }
% $post_to .= $id;


%	if ($tool eq 'Quiz') {
% 		my $path = $m->comp("/tmpl/url:get_full_path");

<& /tmpl/element:jquery_sort_list, params => {
				no_add_button => 1,
				filter => $filter_hash,
				append_instead => 'question_id',
				width => "100%",
				label => __('Questions').':',
				top_buttons => [ $create_button_text, $copy_button_text, $delete_button_text, ],
				container => 'questionsdiv',
				name => 'questions',
				sort => 1,
				no_nesting => 'sort-row',
				action_width => 150,
				action_columns => [
				{'label' => __('Modify'), 'link' => '/quiz/author/questionaddedit/'.$path},
				{'label' => __('Delete'), 'link' => '/quiz/author/questiondelete/'.$path} ] ,
				fields => $list_fields,
				data => $questions_data, 
				post_to => $post_to,
				numbered => 1,
				empty_message => __("No questions available.") }
&>

% } else {


<& /tmpl/element:sort_order_box, params => {
	no_add_button 	=> '1',
        label 		=> __('Questions').':',
	buttons		=>[ $create_button_text, $copy_button_text, $delete_button_text, ],
        layer_info 	=> {
		context_path 	=> $m->comp("/tmpl/url:get_full_path"),
                layer 		=> 'questionsdiv',
                fields 		=> ['question_id', 'quiz_id', 'type', 'body'],
                name 		=> 'question',
                sort 		=> { usage => 'Yes', length => 50 },
                action 		=> {
			usage 		=> 'Yes', 
			length 		=> 100, 
			functions 	=> [
				{ func => $actions->{$tool}->{'edit'}, label => 'Modify'},
                                { func => $actions->{$tool}->{'remove'}, label => 'Delete'} 
					   ]
		},
                display 	=> [
			{label => __('type'),field => 'type', align => 'left', length => 70},
        	        {label => __('body'),uneditable => 1, field => 'body', align => 'left', length => 450}
		],
                validate 	=> {usage => 'No', },
                data 		=> $questions_data 
	},
	trailing_text => $trailing_text,

} &>

% }

</%method>
