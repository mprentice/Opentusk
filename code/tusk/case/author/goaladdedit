<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%shared>
my $id = $m->comp('/tmpl/url:get_last_path_id') ;
my $case = TUSK::Case::Case->new->lookupKey($id);
my $type_path = $m->comp('/tmpl/url:get_type_path');
</%shared>

<%method title>
<%perl>
my $title = __("Objectives");
return $title;
</%perl>
</%method>

<%method leftnav>
<%perl>
return {
	component => '/case/tmpl/leftnav/case-create',
	id => $id,
	type_path => $type_path,
	uri => 'goaladdedit'
	};
</%perl>
</%method>
<%method jsarray>
% return ['ckeditor/ckeditor.js', 'ckeditor/tusk.js', 'layers.js','element.js','caseshell.js', 'jquery/jquery.min.js', 'jquery/jquery-ui.min.js'];
</%method>

<%method get_nav_bar_objects>
% return {'TUSK::Case::Case' => $case};
</%method>

<%once>
use TUSK::Case::LinkCaseObjective;
use TUSK::Case::Case;
</%once>

% my $formname = 'goaladdedit';
<& /tmpl/element:form, params => { 
		method => 'POST',
		name => $formname,
		onsubmit => undef } &>

<& /tmpl/element:table, params => { width => "100%",
		border =>"0",
		cellspacing =>"0",
		cellpadding =>"0" } &>

<& /tmpl/element:sort_order_box , params =>{
                label=>'Objective',
		td_class => 'button-left',
		no_label => 1,
		button_onclick=>"openwindow('objectivesdiv')",
                layer_info => {
                        layer => 'objectivesdiv',
                        fields => ['objective_id', 'body'],
                        name => 'objectives',
                        sort => {usage => 'Yes', length=>50},
                        action => {usage => 'Yes', length=>100, functions => [
                                                        {func=>'edit', label=>__('Modify')},
                                                        {func=>'remove', label=>__('Delete')} ]},
                        display => [ {label=>'body',field=>'body', edittype => 'textarea', align => 'left', length => 600}
                                  ],
                        validate => {
                                        usage => 'No',
                                },
                        data => $objective_data }
                } &>

<& tmpl/sections:case_footer, 
	case      => $case, 
	type_path => $type_path, 
	formname  => $formname,
	&>

<& /tmpl/wizard:include &>

</form>
</table>

<%init>
if (!$case){
	$m->comp('/tmpl/error',msg=>__('That is an invalid case id'));
}
my $objective_data = [];
foreach my $objective (@{$case->getObjectives()}){
	push @{$objective_data}, {'objective_id'=>$objective->getPrimaryKeyID(),
			'body'=>$objective->getBody()};
}
if ($m->comp('/tmpl/wizard:submitted',args =>\%ARGS)){
        my $args = \%ARGS;
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>$args,filter=>'^objectivesdiv');
	my ($tmpHash,$objective,$pk,$link_object);
	my $userHash = {'user'=> $m->comp('SELF:user')};
	my $pk_hash = {};
	#
	# this does not use /tmpl/process because it needs to add objectives if they don't exist.
	#
	foreach my $set (keys (%{$rowHash})){
		$tmpHash = $rowHash->{$set};
		$pk_hash->{$tmpHash->{'pk'}} = 1;
		if ($tmpHash->{'pk'} == 0){
			$objective = TUSK::Core::Objective->new();
		}else{
			$objective = TUSK::Core::Objective->new()->lookupKey($tmpHash->{'pk'});
		}

		$objective->setBody($tmpHash->{'fields'}->{'body'});
		$objective->save($userHash);
		$tmpHash->{'pk'} = $objective->getPrimaryKeyID();

		$link_object = TUSK::Case::LinkCaseObjective->new->lookupByRelation($id,$tmpHash->{'pk'});
		if (!scalar (@{$link_object})){
			$link_object = TUSK::Case::LinkCaseObjective->new();	
			$link_object->setChildObjectiveID($tmpHash->{'pk'});
			$link_object->setParentCaseID($id);
		} else {
			# there should be only one link for a relation
			$link_object = pop @{$link_object};
		}
		$link_object->setSortOrder($tmpHash->{'fields'}->{'sortorder'});
		$link_object->save($userHash);
	}
	# delete any objectives that were not submitted
	for (my $i = 0; $i < @{$objective_data}; $i++) {
		$pk = $objective_data->[$i]->{'objective_id'};
		if (!$pk_hash->{$pk}){
		        $link_object = TUSK::Case::LinkCaseObjective->new->lookupByRelation($id,$pk);
			# there should be only one link for a relation
			map { $_->delete() } @{$link_object};
		}
	}
	$objective_data = [];
	foreach my $objective (@{$case->getObjectives()}){
		push @{$objective_data}, {'objective_id'=>$objective->getPrimaryKeyID(),
				'body'=>$objective->getBody()};
	}
	$m->comp('/tmpl/wizard:do_next',args=>\%ARGS, msg => __('Objectives successfully updated'));

}
</%init>

<%method startup>
<%args>
	$args
</%args>
% $m->comp("SELF:set_msg", msg => __('Objectives successfully updated')) if ($m->comp('/tmpl/wizard:submitted',args => $args));
</%method>
