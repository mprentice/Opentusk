<%shared>
my $id = $m->comp('/tmpl/url:get_last_path_id');
my $user_id = $m->comp('SELF:user');
my $formname = 'phaseshow';
my $case = TUSK::Case::Case->lookupKey($id);
my $type_path = $m->comp('/tmpl/url:get_type_path');
</%shared>
<%method title>
<%perl>
my $title = "Modify Phase";
return $title;
</%perl>
</%method>

<%method leftnav>
<%perl>
return {
	component => '/case/tmpl/leftnav/case-create', 
	id => $id,
	type_path => $type_path,
	uri => 'phaseshow'
	};
</%perl>
</%method>

<%method jsarray>
% return ['caseshell.js','element.js', 'layers.js'];
</%method>

<%method get_nav_bar_objects>
% return {'TUSK::Case::Case' => $case };
</%method>


<%once>
use TUSK::Case::PhaseType;
use TUSK::Case::Case;
my $get_phases_sub = sub {
	my $case_id = shift;
	my $phases = shift;
	my $phase_types = shift;
	my $found_actions = shift;
	my $not_found_actions = shift;
	my $found_hash = {};
	my $phase_type;
	my @phasearray;
	foreach my $phase (@{$phases}){
		$phase_type = $phase->getPhaseType();
		$found_hash->{$phase_type->getPrimaryKeyID()} = 1;
		push (@phasearray,{'phase_id'=>$phase->getPrimaryKeyID(),
					'case_id'=>$case_id,
					'phase_type'=>$phase_type->getTitle(),
					'phase_type_id'=> $phase_type->getPrimaryKeyID(),
					'phase_title'=>$phase->getPhaseTitle(),
					_action => $found_actions
			} );
	}

	foreach $phase_type (@{$phase_types}){
		if (!$found_hash->{$phase_type->getPrimaryKeyID()}){
			push (@phasearray,{
					'phase_id'=>'',
					'case_id'=>$case_id,
					'phase_type'=> '<span class="gray">' . $phase_type->getTitle() . '</span>',
					'phase_title'=> '<span class="gray">phase not defined</span>',
					'phase_type_id'=> $phase_type->getPrimaryKeyID(),
					_action => $not_found_actions });
		}
	}

	return \@phasearray;
};
</%once>

<& /tmpl/element:form, params => {
                method => 'POST',
                name => $formname,
                onsubmit => undef } &>
<& /tmpl/element:table, params => { width => "100%",
                border =>"0",
                cellspacing =>"0",
                cellpadding =>"0" } &>



<& /tmpl/element:sort_order_box , params =>{
                label=>'Phases',
		no_add_button=>1,
		td_class=> 'no-button',
		no_label=>1,
                button_onclick=>"openwindow('phasesdiv')",
                layer_info => {
			context_path=>$m->comp('/tmpl/url:get_type_path'),
                        layer => 'phasesdiv',
                        fields => ['phase_id', 'phase_type_id','phase_title','phase_type'],
                        name => 'phase',
                        sort => {usage => 'Yes', length=>50},
			action =>{usage => 'Yes', length=>500, functions => 'per row'},
                        display => [ {label=>'Display Title',field=>'phase_title', align=>'left', length=>350},
					 {label=>'Phases',field=>'phase_type', align=>'left', length=>350}
                                  ],
                        validate => {
                                        usage => 'No',
                                },
                        data => $phasearray }
                } &>

<& /tmpl/element:vertical_spacing, size=>1 &>
<& /tmpl/element:note, msg=>$phase_select &>

<& tmpl/sections:case_footer, case=>$case, type_path=>$type_path, formname=>$formname &>

<& /tmpl/wizard:include &>

</form>
</table>

<%init>
# do some quick error checking
$m->comp('/tmpl/url:redirect', message => 'Missing Case ID') unless (defined $id);
$m->comp('/tmpl/url:redirect', message => 'Invalid Case ID') unless (defined $case);

my $phase_types = TUSK::Case::PhaseType->lookup (" 1 = 1 ",['default_sort_order'] );
my $phases = $case->availablePhases();

my $found_actions =  {usage => 'Yes', length=>100, functions => [
				{func=>'phase_edit', label=>'Modify'},
				{func=>'remove', label=>'Delete'} ]};
my $not_found_actions =  {usage => 'Yes', length=>100, functions => [
				{func=>'phase_edit', label=>'Create'},
				{func=>'remove', label=>'Delete'}
	 ]};

my $phasearray = $get_phases_sub->($id,$phases,$phase_types,$found_actions,$not_found_actions);

my $phaseTypeArray = [];
foreach my $phase_type (@{$phase_types}){
	push @{$phaseTypeArray}, {'label'=>$phase_type->getTitle(),
	'value'=>$phase_type->getPrimaryKeyID};
}
my $phase_select = $m->scomp('/tmpl/element:dropdown',params=>{ 
		before_text =>'Add phase to case above:',
                name=>"phase_type",
		onclick=>"phase_select($id,'$type_path');",
                onchange=>undef,
                options=>$phaseTypeArray });


if ($m->comp('/tmpl/wizard:submitted',args =>\%ARGS)){
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>\%ARGS,filter=>'^phasesdiv');
	foreach my $set (keys %{$rowHash}){
		if (!$rowHash->{$set}->{'pk'}){
			delete $rowHash->{$set};	
		}
	}

        $m->comp('/tmpl/process:manipulate_rows',
                user => $user_id,
                parent_id => $id,
                object_name => 'TUSK::Case::LinkCasePhase',
                set_parent => 'setParentCaseID',
                set_child => 'setChildPhaseID',
                child_pk_field => 'phase_id',
                fields_data => $rowHash,
                display_data => $phasearray );

	$phases = $case->availablePhases();
	$phasearray = $get_phases_sub->($id,$phases,$phase_types,$found_actions,$not_found_actions);
	$m->comp('/tmpl/wizard:do_next',args=>\%ARGS, msg => 'Phases succesfully updated');
}
</%init>

<%method startup>
<%args>
	$args
</%args>
% $m->comp("SELF:set_msg", msg => 'Phases successfully updated') if ($m->comp('/tmpl/wizard:submitted',args => $args));
</%method>