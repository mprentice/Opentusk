<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%once>
	use TUSK::FormBuilder::Field;
	use TUSK::FormBuilder::FieldType;
	use TUSK::FormBuilder::ItemType;
	use TUSK::FormBuilder::AttributeType;
	use TUSK::FormBuilder::FieldComment;
	use TUSK::FormBuilder::Form::AttributeItem;
	use TUSK::FormBuilder::Form::AttributeFieldItem;
</%once>

<%shared>
	my $form = $m->comp('/formbuilder/util:get_form', join_objects => [ TUSK::Core::JoinObject->new('TUSK::FormBuilder::Assessment', { joinkey => 'form_id', jointype => 'inner' }) ]);
	my $assessment_form = $form->getJoinObject('TUSK::FormBuilder::Assessment');
	my ($form_id, $field_id) = $m->comp("/tmpl/url:get_path_ids");
	my $form_name = 'fieldedit';
	my $field;
	my $subfield_display = 'none',
	my $selection_option_display = 'none';
	my $rubric_display = 'none';
	my $attribute_type_options = [];
	my $args = {  $m->request_args() };
	my $rubric_data = [];
	my $subfields_data = [];
	my $selection_options_data = [];
	my $canned_comment = [];
	my $comment_object_type = 'Field';
</%shared>

<& /tmpl/element:form, params => {
	method => 'POST',
	onsubmit => 'return fieldaddedit_submit(this)',
	name => $form_name } &>

<& /tmpl/wizard:include &>

<& /tmpl/element:table, params => { width => "100%",
	border => "0",
	cellspacing => "0",
    cellpadding => "0" } &>

% if ($field_id) {
<& /tmpl/element:field_display, params => { 
	label => 'Type',
	value => $field->getFieldTypeLabel()
} &>
% } else {
% 	my $select_label = TUSK::FormBuilder::FieldType->new();
% 	$select_label->setLabel('Select');	
% 	my $field_types = TUSK::FormBuilder::FieldType->getFieldTypes($m->comp('SELF:getFormToken'));

<& /tmpl/element:dropdown, params => { 
	label => __('Type'),
	name => "field_type_id",
	selected => $field->getFieldTypeDropDownValue(),
	options => $m->comp("/tmpl/element:make_dropdown_options", arrayref => [ $select_label, @$field_types], label => "getLabel", value => "getDropDownValue") } &>
% }

<& /tmpl/element:textbox, params =>{ label => __('Title'),
                name => 'field_name',
                value => $field->getFieldName(),
                size => 60,
                length => 100 } &>

<& /tmpl/element:dropdown, params=>{ label => __('Required'),
	name => "required",
	selected => $field->getRequired(),
    options => [ { label => __('No'), value => '0'}, { label => __('Yes'), value => '1' } ] } &>

<& /tmpl/element:sort_order_box , params => {
	no_add_button => 1,
	label => __('Sub Criteria'),
	name => "subfield",
	style => 'display:' . $subfield_display,
	buttons => [ $m->scomp('/tmpl/element:button', params => {
					onclick => "layers['subfielddiv'].adddata({item_id:'0', name:''},0);",
					name => 'addsubfield',
					label => __('Add Sub Criteria')}) ],
	layer_info => {
		empty_message => __('No sub criteria defined'),
		context_path => $m->comp("/tmpl/url:get_full_path"),
		base_path => $m->comp("/formbuilder/util:get_base_dir"),
        layer => 'subfielddiv',
        fields => ['item_id','name'],
        name => 'subfield',
		scrollrows => 3,
		sort => { usage => 'Yes', length => 50},
		action => { usage => 'Yes', length => 60, functions => [ { func => 'remove', label => __('Delete')} ] },
		display => [
			{ label => '', field => 'item_id', type => 'hidden'}, 
			{ label => __('Title'), field => 'name', type => 'textbox', align => 'left', length => 500 }, 
		],
		validate => { usage => 'No', form => 'fieldedit',},
		data => $subfields_data }
} &>

<& /tmpl/element:sort_order_box , params => {
	no_add_button => 1,
	label => __('Selection Options'),
	name => "selection_options",
	style => 'display:' . $selection_option_display,
	buttons => [ $m->scomp('/tmpl/element:button', params => {
		onclick => "layers['selectiondiv'].adddata({attribute_id:'0', name:''},0);",
		name => 'addselection',
		label => __('Add Selection')}) ],
	layer_info => {
		empty_message => __('No selection option associated'),
		context_path => $m->comp("/tmpl/url:get_full_path"),
		base_path => $m->comp("/formbuilder/util:get_base_dir"),
        layer => 'selectiondiv',
        fields => ['attribute_id','name'],
        name => 'selection',
		scrollrows => 3,
		sort => { usage => 'Yes', length => 50},
		action => { usage => 'Yes', length => 60, functions => [ { func => 'remove', label => __('Delete')} ] },
		display => [
			{ label => '', field => 'attribut_id', type => 'hidden'}, 
			{ label => __('Title'), field => 'name', type => 'textbox', align => 'left', length => 500 }, 
		],
		validate => { usage => 'No', form => 'fieldedit',},
		data => $selection_options_data }
} &>

<%perl>
	my ($min_score_box, $max_score_box) = ({}, {});
	my $rubric_items = ['item_id', 'attribute_item_id', 'attribute_field_item_id', 'title', 'item_name', 'comment_required', 'sort_order' ];
	if ($assessment_form) {
		if ($assessment_form->getScoreDisplay()) {
			my $min_label = '';
			push @$rubric_items, 'min_value';
			if ($assessment_form->getScoreRange()) {
				push @$rubric_items, 'max_value';
				$min_label = __('Min ');
        		$max_score_box = { label => __('Max Score'), field => 'max_value', align =>'center', type => 'text'};
			}
        	$min_score_box = { label = $min_label . __('Score'), field => 'min_value', align =>'center', type => 'text'};
		}
	} 
</%perl>

<& /tmpl/element:sort_order_box , params => {
	no_add_button => 1,
	label => __('Performance Levels'),
	name => "rubric",
	style => 'display:' . $rubric_display,
	layer_info => {
		empty_message => __('No performance levels defined ') . ((scalar @$rubric_data) ? '' : '<input type="hidden" name="no_rubric" value="1"'),
		context_path => $m->comp("/tmpl/url:get_full_path"),
		base_path => $m->comp("/formbuilder/util:get_base_dir"),
        layer => 'rubricdiv',
        fields => $rubric_items,
        name => 'rubric',
		scrollrows => 4,
		sort => { usage => 'No', length => 50},
		action => { usage => 'No' },
		display => [
			{ label => '', field => 'item_id', type => 'hidden'},
			{ label => '', field => 'attribute_item_id', type => 'hidden'}, 
			{ label => '', field => 'attribute_field_item_id', type => 'hidden'},  
			{ label => __('Title'), field => 'title', type => 'text', align => 'left', length => 200 }, 
			{ label => __('Description'), field => 'item_name', type => 'textarea', align => 'left', length => 600 }, 
			$min_score_box,
			$max_score_box,
			{ label => __('Comment Required'), field => 'comment_required', type => 'checkbox', align => 'center'}, 
			{ label => '', field => 'sort_order', type => 'hidden'}, 
		],
		validate => { usage => 'No', form => 'fieldedit',},
		data => $rubric_data 
	},
} &>

% my $show_comment = ($field->getShowComment()) ? 'CHECKED' : '';
<& /tmpl/element:sort_order_box, params =>{
		no_add_button => 1,
		label => __("Comments"),
		name => 'comment',
		buttons => [ '<div style="margin:0 10px 10px 0"><input type="checkbox" id="show_field_comment" name="show_comment" value="1" ' . $show_comment . ' />'.__('Display comments for this performance criteria').'</div>' . 
			$m->scomp('/tmpl/element:button', params => {
				onclick => "layers['commentdiv'].adddata({field_comment_id:'0', comment:''},0);",
				name => 'newcomment',
				label => __('Add Predefined Comment')}) ],
		sort_box => 0,
		layer_info => {
			layer => 'commentdiv',
			scrollrows => 6,
	       	fields => ['field_comment_id','comment'],
			empty_message => __('No comments defined'),
			name => 'comment',
			sort => { usage => 'No', length => 0},
			action => { usage => 'Yes', length => 50, functions => [ { func => 'remove', label => __('Delete')} ] },
			display => [
				{ label => __('Comment'), field => 'comment', type => 'textbox', align => 'left', length => 700 },
			],
			validate => { usage => 'No', },
			data => $canned_comment } } &>

<& /tmpl/element:save_button, params => { 
	label 	=>	__('Save Changes'), 
	buttons => 	[$m->scomp('/tmpl/element:button', params => { 
		label => __('New Performance Criteria'), 
		onclick => "window.location='/assessment/author/field/" . $m->comp("/tmpl/url:get_type_path") . "/$form_id'" }) 
	], 
    cancel_onclick => "go_back('" . $m->comp("/tmpl/url:construct_back_url", base_url => $m->comp("/formbuilder/util:get_base_dir") . '/addedit') . "');",
	name	=>	'form_submit' 
} &>
</table>
</form>

<%init>
	$m->comp('SELF:pre_process');
	if (defined($args->{'form_submit'}) or $m->comp("/tmpl/wizard:submitted", args => $args)){
		$field->setFieldName($args->{'field_name'});
		$field->setFieldTypeID($args->{'field_type_id'});
		$field->setShowComment(($args->{'show_comment'}) ? $args->{'show_comment'} : 0);
		$field->setRequired($args->{'required'});
		$field->save({'user' => $m->session->{'user'}->user_id()});

		my ($extra, $msg);
		if ($field_id){
			$msg = __('Field successfully modified');
			$extra = '';
		} else {
			$field_id = $field->getPrimaryKeyID();
			$extra = $field_id;
			$msg = __('Field successfully created');
			my $link = TUSK::FormBuilder::LinkFormField->new;
			$link->setParentFormID($form->getPrimaryKeyID());
			$link->setChildFieldID($extra);
			my $fields = $form->getFields();
			$link->setSortOrder(scalar(@$fields)*10 + 10);
			$link->save({'user' => $m->session->{'user'}->user_id()});
		}

		$m->comp('SELF:update_selection_data');
		$m->comp('SELF:update_canned_comment');
		## not sure why default field type object was not blessed so try to pull the object again
		$field = $field->lookupKey($field_id) if (ref $field->getFieldTypeObject() ne 'TUSK::FormBuilder::FieldType');
		$m->comp('SELF:update_subfield_data') if ($field->hasSubFields());
		$m->comp('SELF:update_rubric_data')  if ($field->isRubric());

		$m->comp("/tmpl/wizard:do_next", args => $args, default_transition => $m->comp("/tmpl/url:construct_url", 'base_url' => $ENV{SCRIPT_NAME}, 'extra' => $extra, 'msg' => $msg ));
	}
</%init>

<%method pre_process>
<%perl>
	my $rubrics = [];
	if ($field_id) {
		$field = TUSK::FormBuilder::Field->new()->lookupKey($field_id);
		
		if ($field->isSingleSelect() || $field->isSingleSelectWithSubFields()) {
			$selection_option_display = '';
			my $attributes = TUSK::FormBuilder::Attribute->lookup("field_id = $field_id", ['sort_order']);
			foreach my $attribute (@$attributes) {
				push @$selection_options_data, { 'attribute_id' => $attribute->getPrimaryKeyID(), name => $attribute->getAttributeName() };
			}
		}

		if ($field->isRubric()) {
			$rubric_display = '';
			$rubrics = TUSK::FormBuilder::Form::AttributeItem->lookup(undef, ['form_builder_form_attribute_item.sort_order'], undef, undef, [ 
				TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::AttributeFieldItem', { joinkey => 'attribute_item_id', jointype => 'left outer' }),
				TUSK::Core::JoinObject->new('TUSK::FormBuilder::FieldItem', { joinkey => 'item_id', origkey => 'form_builder_form_attribute_field_item.field_item_id', jointype => 'inner', joincond => "field_id = " . $field->getPrimaryKeyID() }),
				TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::Attribute', { joinkey => 'attribute_id', jointype => 'inner', joincond => "form_id = $form_id" })
			]);

			### handle if user forgets to add performance level for the first time
			unless (scalar @$rubrics) {
				$rubrics = TUSK::FormBuilder::Form::AttributeItem->lookup(undef, ['form_builder_form_attribute_item.sort_order'], undef, undef, [ 
					TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::Attribute', { joinkey => 'attribute_id', jointype => 'inner', joincond => "form_id = $form_id" }) 
				]);
			}
		}

		if ($field->hasSubFields()) {
			$subfield_display = '';
			my $items = TUSK::FormBuilder::FieldItem->lookup("field_id = $field_id", ['sort_order']);
			foreach my $item (@$items) {
				push @$subfields_data, { 'item_id' => $item->getPrimaryKeyID(), name => $item->getItemName() };
			}
		}

		my $field_comments = TUSK::FormBuilder::FieldComment->lookup("field_id = $field_id", ['sort_order']);
		foreach (@$field_comments) {
			push @$canned_comment, { field_comment_id => $_->getPrimaryKeyID(), comment => $_->getComment() };
		}
	} else {
		$field = TUSK::FormBuilder::Field->new();
		$rubrics = TUSK::FormBuilder::Form::AttributeItem->lookup(undef, ['form_builder_form_attribute_item.sort_order'], undef, undef, [ 
			TUSK::Core::JoinObject->new('TUSK::FormBuilder::Form::Attribute', { joinkey => 'attribute_id', jointype => 'inner', joincond => "form_id = $form_id" }) 
		]);
	}

	foreach (@$rubrics) {
		my $field_item = (ref $_->getJoinObject('TUSK::FormBuilder::FieldItem') eq 'TUSK::FormBuilder::FieldItem') ? $_->getJoinObject('TUSK::FormBuilder::FieldItem') : TUSK::FormBuilder::FieldItem->new();
		my $attribute_field_item = (ref $_->getJoinObject('TUSK::FormBuilder::Form::AttributeFieldItem') eq 'TUSK::FormBuilder::Form::AttributeFieldItem') ? $_->getJoinObject('TUSK::FormBuilder::Form::AttributeFieldItem') : TUSK::FormBuilder::Form::AttributeFieldItem->new();
						
		push @$rubric_data, { 
			attribute_item_id => $_->getPrimaryKeyID(),
			attribute_field_item_id => $attribute_field_item->getPrimaryKeyID(), 
			item_id => $field_item->getPrimaryKeyID(),
			item_name => $field_item->getItemName(),
			title => $_->getTitle(), 
			min_value => $_->getMinValue(), 
			max_value => $_->getMaxValue(),
			sort_order => $_->getSortOrder(),
			comment_required => $attribute_field_item->getCommentRequired(),
		};
	}
</%perl>
</%method>

<%method update_subfield_data>
<%perl>
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>$args,filter=>'^subfielddiv');
	my $item_type_id;
	if (my $item_type = TUSK::FormBuilder::ItemType->lookupReturnOne("token = 'Item'")) {
		$item_type_id = $item_type->getPrimaryKeyID();
	}

	my $index = 1;
	foreach my $set (sort keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'name'}){
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
			$rowHash->{$set}->{'fields'}->{'item_type_id'} = $item_type_id;
			$rowHash->{$set}->{'fields'}->{'sortorder'} = $index;
			$index++;
		} else {
			delete $rowHash->{$set};
		}
	}
</%perl>


<& /tmpl/process:manipulate_rows,
	row_type => 'Direct',
	user => $m->session->{'user'}->user_id(),
	object_name => 'TUSK::FormBuilder::FieldItem',
	fields_data => $rowHash,
	field_function_map => {
		'field_id'=>'setFieldID',
		'name'=> 'setItemName',
		'item_type_id' => 'setItemTypeID',
		'sortorder'=>'setSortOrder',
	},
	display_data => $subfields_data 
&>
</%method>


<%method update_selection_data>
<%perl>
	my $attribute_type_id;
	if (my $attribute_type = TUSK::FormBuilder::AttributeType->lookupReturnOne("token = 'DropDown'")) {
		$attribute_type_id = $attribute_type->getPrimaryKeyID();
	}

	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=> $args,filter=>'^selectiondiv');
	my $index = 1;
	foreach my $set (keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'name'}){
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
			$rowHash->{$set}->{'fields'}->{'attribute_type_id'} = $attribute_type_id;
			$rowHash->{$set}->{'fields'}->{'sortorder'} = $index;
			$index++;
		} else {
			delete $rowHash->{$set};
		}
	}
</%perl>

<& /tmpl/process:manipulate_rows,
	row_type => 'Direct',
	user => $m->session->{'user'}->user_id(),
	object_name => 'TUSK::FormBuilder::Attribute',
	fields_data => $rowHash,
	field_function_map => {
		'field_id'=>'setFieldID',
		'sortorder'=>'setSortOrder',
		'name'=>'setAttributeName',
		'attribute_type_id' => 'setAttributeTypeID',
	},
	display_data => $selection_options_data,
&>
</%method>


<%doc>
we leave out updating sort_order; it could be used in the future, default value is 1
</%doc>
<%method update_rubric_data>
<%perl>
	my $rowHash = $m->comp('/tmpl/process:process_fields', fields => $args, filter => '^rubricdiv');

	my $index = 1;
	foreach my $set (sort keys %$rowHash) {
		$rowHash->{$set}->{'fields'}->{'field_id'} = $field->getPrimaryKeyID();
		$rowHash->{$set}->{'fields'}->{'sortorder'} = $index;
		$rowHash->{$set}->{'fields'}->{'comment_required'} = ($rowHash->{$set}->{'fields'}->{'comment_required'} eq 'on') ? 1 : 0;
		$index++;
	}
</%perl>

<& /tmpl/process:manipulate_rows,
	row_type => 'MultiDirect',
	row_object_name => 'TUSK::FormBuilder::FieldItem',
	user => $m->session->{'user'}->user_id(),
	no_delete => 1,
	fields_data => $rowHash,
	display_data => $rubric_data,
	structs => [ 
		{
			object_name => 'TUSK::FormBuilder::FieldItem',
			functions => {
				'item_name' 		=> 'setItemName',
				'field_id' 			=> 'setFieldID',
				'sort_order'		=> 'setSortOrder',
			},
			pk => 'item_id',
			reset => { item_id => 'getPrimaryKeyID' },	
		},
		{ 	object_name => 'TUSK::FormBuilder::Form::AttributeFieldItem',
			functions => {
				attribute_item_id => 'setAttributeItemID',
				item_id => 'setFieldItemID',
				comment_required => 'setCommentRequired',
			},
			pk => 'attribute_field_item_id'
		},
	],
&>
</%method>

<%method update_canned_comment>
<%perl>
	my $rowHash = $m->comp('/tmpl/process:process_fields',fields=>$args,filter=>'^commentdiv');
	my $i = 1;
	foreach my $set (sort keys %$rowHash){
		if ($rowHash->{$set}->{'fields'}->{'comment'}){
			$rowHash->{$set}->{'fields'}->{'field_id'} = $field_id;
			$rowHash->{$set}->{'fields'}->{'sortorder'} = $i;
		} else {
			delete $rowHash->{$set};
		}
		$i++;
	}
</%perl>

<& /tmpl/process:manipulate_rows,
	row_type => 'Direct',
	user => $m->session->{'user'}->user_id(),
	object_name => 'TUSK::FormBuilder::FieldComment',
	fields_data => $rowHash,
	field_function_map => {
		'field_id' =>'setFieldID',
		'comment' => 'setComment',
		'sortorder'=>'setSortOrder',
	},
	display_data => $canned_comment
&>
</%method>

<%method title>
% 	return ($field_id) ? __("Modify Performance Criteria") : __("Create New Performance Criteria");
</%method>

<%method red_header_text>
% 	return $m->comp("SELF:title");
</%method>

<%method jsarray>
% 	return ['layers.js', 'formbuilder.js', 'element.js', 'jquery/jquery.min.js', 'assessment/field.js'];
</%method>

<%method get_nav_bar_objects>
%	return { 'TUSK::FormBuilder::Form' => $form };
</%method>
