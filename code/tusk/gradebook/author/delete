<%doc>
 Copyright 2012 Tufts University 

 Licensed under the Educational Community License, Version 1.0 (the "License"); 
 you may not use this file except in compliance with the License. 
 You may obtain a copy of the License at 

 http://www.opensource.org/licenses/ecl1.php 

 Unless required by applicable law or agreed to in writing, software 
 distributed under the License is distributed on an "AS IS" BASIS, 
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 See the License for the specific language governing permissions and 
 limitations under the License.
</%doc>
<%attr>
</%attr>

<%once>
	use TUSK::GradeBook::GradeEvent;
	use TUSK::GradeBook::LinkUserGradeEvent;
	use TUSK::GradeBook::GradeEventEval;
</%once>


<%shared>
	my $event_id = $m->comp("/tmpl/url:get_last_path_id");
	my $type_object = $m->comp("/tmpl/url:get_type_object");
	my $event = TUSK::GradeBook::GradeEvent->new->lookupKey($event_id);

	unless ($event->checkTypePath($type_object, $m->comp("SELF:get_timeperiod_id"))){
		$m->comp("/tmpl/url:redirect", message => "The was an error with your request");
	}

	my ($grades_data, $saved_grades) = $event->getGradeRecords($type_object);

  my $is_assignment = scalar @{$event->lookup("grade_event_id = $event_id",
    undef, undef, undef,
    [TUSK::Core::JoinObject->new('TUSK::GradeBook::GradeEventType',
      { joinkey => "grade_event_type_id", jointype => "inner",
        joincond => "grade_event_type_name = 'Assignment'" }),])};
</%shared>

<%method startup>
  <%args>
    $args
  </%args>
  <%perl>
    # Check if the grade event is part of an assignment. If
    # so, show an error and don't allow user to delete.
    # This is because deleting the grade event would delete
    # the content of the assignment.
    if ($is_assignment) {
      $m->comp("SELF:set_msg",
        msg => __('Grade event cannot be deleted while the assignment exists.'),
        type => 'err');
    }
    else {
      $m->comp("SELF:set_msg",
        msg => __('Are you sure you want to delete this grade event and grade records?'),
        type => 'hintmsg');
    }
  </%perl>

</%method>

<& /tmpl/element:form, params => {
                method => 'POST',
                name => 'eventdelete' } &>

<& /tmpl/element:table, params => { width => "100%",
                border =>"0",
                cellspacing =>"0",
                cellpadding =>"0" } &>

<& /tmpl/element:field_display, params=>{ label=>'Grade Event Name', value => $event->getEventName() }&>

<& /tmpl/element:sort_order_box, params =>{
				label=>__('Grades'),
                no_add_button=>1,
                buttons => [],
                layer_info => {
            	    layer => 'gradesdiv',
					fields => ['link_user_grade_event_id', 'name', 'grade', 'comments', 'user_id'],
                    name => 'grades',
					sort => {usage => 'No'},
					action => {usage => 'No'},
					scrollrows => 10,
                    display => [
						{label=>__('Name'),field=>'name', align=>'left', length=>300 },
				    	{label=>__('User ID'), field=>'user_id', align=>'left', length=>50 },
			        	{label=>__('Grade'),field=>'grade', align=>'center', length=>50},
               			{label=>__('Comments'),field=>'comments', align=>'left', length=>300}
					],
				validate => { usage => 'No', },
				data => $grades_data }} &>
% unless ($is_assignment) {
<& /tmpl/element:save_button, params=>{label=>__('Delete'),
                cancel_onclick=>"go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show") . "');",
                name=>'submit'} &>
% }
</table>
</form>

<%init>
if (defined($ARGS{'submit'})){
	foreach my $saved_grade (@$saved_grades){
		$saved_grade->delete({user => $m->session->{'user'}->user_id() });
	}

	my $grade_event_eval = TUSK::GradeBook::GradeEventEval->lookupReturnOne( "grade_event_id = " . $event->getPrimaryKeyID );
	if ( $grade_event_eval ) {
		$grade_event_eval->delete({'user' => $m->session->{'user'}->user_id()});
	}

	$event->delete({user => $m->session->{'user'}->user_id() });
	$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show", 'msg' => "Grade Event Deleted"));
}
</%init>

<%method jsarray>
% 	return ['layers.js'];
</%method>

<%method title>
% 	return __("Delete Grade Event");
</%method>

<%method red_header_text>
% 	return $m->comp('SELF:title');
</%method>
