<%attr>
	hintmsg => 'Are you sure you want to delete this grade category?'
</%attr>

<%once>
	use TUSK::GradeBook::GradeCategory;
	use TUSK::GradeBook::GradeCategoryCodingCode;
</%once>

<%shared>
	my $category_id = $m->comp("/tmpl/url:get_last_path_id");
	my $type_object = $m->comp("/tmpl/url:get_type_object");
	my $category = TUSK::GradeBook::GradeCategory->new->lookupKey($category_id);
</%shared>

<& /tmpl/element:form, params => {
	method => 'POST',
	name => 'categorydelete' 
} &>

<& /tmpl/element:table, params => { 
	width => "100%",
	border =>"0",
	cellspacing =>"0",
	cellpadding =>"0"
} &>

<& /tmpl/element:field_display, params => { 
	label => 'Grade Category Name', 
	value => $category->getGradeCategoryName() 
} &>

<& /tmpl/element:save_button, params=>{
	label => 'Delete',
	cancel_onclick => "go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show") . "');",
    name => 'submit'
} &>
</table>
</form>


<%init>
	if (defined($ARGS{'submit_check'}) && ref $category eq 'TUSK::GradeBook::GradeCategory') {
		## if children, update the parent of children (cats and events) to its own parent 
		## update sort_order of the sibling categories
		my $parent_category_id = $category->getParentGradeCategoryID();
		my $user_id = $m->session->{'user'}->user_id();

		### adjust the attributes of all descandant categories
		my $descendant_categories = $category->getDescendants();
		my $children_offset = 0;

		### retrieve younger siblings first as we might need to use original set of siblings
		my $sibling_categories = $category->getSiblings("sort_order > " . $category->getSortOrder());

		foreach my $descendant_category (@$descendant_categories) {
			## adjust sort_order and parent id only for one-level children
			if ($descendant_category->getParentGradeCategoryID == $category_id) {
				$descendant_category->setParentGradeCategoryID($parent_category_id);
				$descendant_category->setSortOrder($category->getSortOrder() + $children_offset);
				$children_offset++;
			}

			$descendant_category->setDepth($descendant_category->getDepth()-1);
			my $lineage = $descendant_category->getLineage();
			$lineage =~ s/\/$category_id\//\//;
			$descendant_category->setLineage($lineage);
			$descendant_category->save({user => $user_id});
		}

		my $child_events = $category->getEventChildren();
		foreach my $child_event (@$child_events) {
			$child_event->setGradeCategoryID($parent_category_id);
			$child_event->save({user => $user_id});
		}

		### reorder the categories at the same level if necessary
		### reflect the number of children that are promoted to parent level
		my $siblings_offset = 0; 
		if ($children_offset == 0) { ## no child, move back one
			$siblings_offset = -1;  
		} elsif ($children_offset > 1) {  ## more than one child(n), move back n-1
			$siblings_offset =  $children_offset - 1;
		}

		unless ($children_offset == 1) { ## 1 child no need to adjust
			foreach my $sibling_category (@$sibling_categories) {
				$sibling_category->setSortOrder($sibling_category->getSortOrder() + $siblings_offset);
				$sibling_category->save({user => $user_id});
			}
		}

		my $codes = TUSK::GradeBook::GradeCategoryCodingCode->lookup("grade_category_id = " . $category->getPrimaryKeyID());
		if (scalar @$codes) {
			$_->delete({user => $user_id}) foreach @$codes;
		}

		$category->delete({user => $user_id});

		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show", 'msg' => "Grade Category Deleted"));
	}
</%init>

<%method get_nav_bar_objects>
% 	return {'TUSK::GradeBook::GradeCategory' => $category};
</%method>

<%method title>
% 	return "Delete Grade Category";
</%method>

<%method red_header_text>
% 	return $m->comp('SELF:title');
</%method>
