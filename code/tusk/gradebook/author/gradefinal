<%once>
	use TUSK::Application::GradeBook::GradeBook;
	use TUSK::GradeBook::GradeMultiple;
</%once>

<%shared>
	my $type_object = $m->comp("/tmpl/url:get_type_object");
	my $time_period_id = $m->comp('SELF:get_timeperiod_id');
	my $user_id = $m->session()->{user}->user_id();
	my $gb = TUSK::Application::GradeBook::GradeBook->new({course => $type_object, time_period_id => $time_period_id, user_id => $user_id});
	my $final_grade_event;
	my $final_grade_records = [];
	my $final_saved_grades = [];
	my $total_weight = 0;
</%shared>
<div style="margin:5px 0 0 3px;">
<& SELF:print_gradebook_tools &>
</div>
<& /tmpl/element:form, params => {
	method => 'POST',
	onsubmit =>'return submitGradeFinal(this);',
	name => 'gradefinal' } &>

<& /tmpl/element:table, params => { 
	width 		=> "",
	border		=> "0",
	cellspacing	=> "0",
	cellpadding	=> "0" 
} &>

<tr><td colspan="2">
<input type="hidden" name="total_weight" value="<% $total_weight %>" />
</td></tr>
% if ($final_grade_event) {
<tr><td colspan="2">
<input type="hidden" name="final_grade_event_id" value="<% $final_grade_event->getPrimaryKeyID() %>" />
</td></tr>

<& SELF:print_buttons &>

<& /tmpl/element:textbox, params => { 
	label => 'Event Name',
	name => 'event_name',
	value => $final_grade_event->getEventName(),
	size => 60,
	length => 255,
	onchange => 'updateFinalGradeMetaData(this);',
} &>

<& /tmpl/element:posted_dropdown, 
	selected => $final_grade_event->getPublishFlag(),
	onchange => 'updateFinalGradeMetaData(this);',
&>

<& /tmpl/element:field_display, params => { 
	label => 'Total Weight',
	value => $total_weight,
} &>
% }

<& /tmpl/element:sort_order_box, params => {
	no_label => 1,
	no_add_button => 1,
	buttons => [],
	layer_info => {
		layer => 'finalgradesdiv',
		context_path => $m->comp("/tmpl/url:get_full_path"),
		fields => ['link_user_grade_event_id', 'name','user_id', 'calc_grade', 'adj_grade'],
		name => 'calculated final grades',
		sort => {usage => 'No'},
		action => {usage => 'No'},
		scrollrows => 10,
		display => [
			{label => 'Name',field => 'name', align=>'left', length => 150 },
			{label => 'User&nbsp;ID', field => 'user_id', align => 'left', length => 20 },
			{label => 'Calculated Grade', field=>'calc_grade', align => 'center', length => 25},
			{label => 'Override Grade', field => 'adj_grade', align=>'center', length => 40, type => 'textbox'},
			{label => 'Comments', field => 'comments', align => 'left', length => 300, type => 'textbox' }
		],
		validate => { usage => 'No', form => 'finalgrade'},
		data => $final_grade_records }
} &>

<& SELF:print_buttons, no_gradebook_tools => 1 &>

</table>
</form>

<%init>
	if ($final_grade_event = $gb->getFinalGradeEvent($ARGS{final_grade_event_id})) {
		($final_grade_records, $final_saved_grades) = $final_grade_event->getFinalGradeRecords($type_object);
	}
	my $msg;
	if ($ARGS{submit_check}) {
		if ($ARGS{calculate_final_grade}) {
			$gb->calculateFinalGradeByEvent();
			$msg = 'Successfully Calculated';
		} elsif ($ARGS{save_changes}) {
			if ($final_grade_event) {
				if ($ARGS{event_name_changed} || $ARGS{publish_flag_changed}) {
					$final_grade_event->setEventName($ARGS{event_name});
					$final_grade_event->setPublishFlag($ARGS{publish_flag});
					$final_grade_event->save({user => $user_id });
				}
			}

			my $row_hash = $m->comp('/tmpl/process:process_fields',fields => \%ARGS, filter => '^finalgradesdiv');
			foreach my $key (keys %$row_hash){
				if ($row_hash->{$key}{fields}{adj_grade} eq '' && $row_hash->{$key}{fields}{comments} eq ''){
					delete($row_hash->{$key});
				}
			}

			$m->comp('SELF:save_changes', rows => $row_hash) if $row_hash;
			$msg = 'Successfully Saved';
		}

		$m->redirect($m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/gradefinal", 'msg' => $msg));
	}

	$total_weight += $_->getWeight() foreach (@{$gb->getAllButFinalEvents()});
</%init>

<%method print_buttons>
<%args>
	$no_gradebook_tools => undef
</%args>
<& /tmpl/element:save_button, params=>{
	label 			=> 'Save Changes',
	cancel_onclick  => "go_back('" . $m->comp("/tmpl/url:construct_url", 'base_url' => "/gradebook/author/show") . "');",
	style			=> ($final_grade_event) ? '' : 'display:none;',
	name			=> 'save_changes',
	buttons			=>  [ $m->scomp('/tmpl/element:button', params => { label => 'Calculate Final Grades',  name => 'calculate_final_grade', type => 'submit' }), ],
	one_column		=> 1,
	colspan			=> 2,
} &>
</%method>

<%method save_changes>
<%args>
	$rows
</%args>
<%perl>
	my %existing_records = ();
	if ($final_saved_grades) {
		%existing_records =	map { $_->getPrimaryKeyID() => $_ } @$final_saved_grades;
	}
	foreach my $key (keys %$rows) {
		my $pk = $rows->{$key}{pk};
		if (exists $existing_records{$pk}) {
			$existing_records{$pk}->setGrade($rows->{$key}{fields}{adj_grade});
			$existing_records{$pk}->setComments($rows->{$key}{fields}{comments});
			$existing_records{$pk}->save({user => $user_id});
			

			my $adjusted = $existing_records{$pk}->getJoinObject('adjusted');
			if (ref $adjusted eq 'TUSK::GradeBook::GradeMultiple') {
				$adjusted->setGrade($rows->{$key}{fields}{adj_grade});
				$adjusted->save({user => $user_id});
			} else {
				my $multi = TUSK::GradeBook::GradeMultiple->new();
				$multi->setLinkUserGradeEventID($existing_records{$pk}->getPrimaryKeyID());
				$multi->setGrade($rows->{$key}{fields}{adj_grade});
				$multi->setGradeType($TUSK::GradeBook::GradeMultiple::ADJUSTED_FINAL_GRADETYPE);
				$multi->save({user => $user_id});
			}
		} 
	}
</%perl>
</%method>

<%method title>
%	return "Update Final Grades";
</%method>

<%method red_header_text>
% 	return $m->comp('SELF:title');
</%method>

<%method jsarray>
% 	return ['layers.js', 'element.js','gradebook.js'];
</%method>




